

BiosLoad:
		CALL LOAD_INT_VECTOR_TABLE	;COPIES INTERRUPT VECTOR TABLE TO ADDRESS 0X0000:0X0000
		CALL LOAD_BIOS_DATA_AREA	;COPIES BIOS DATA TO ADDRESS 0X0000:0X0400
		call INITIALIZE_CH376S_0XE0
        ret


LOAD_INT_VECTOR_TABLE:
	CLD
	MOV AX, 0X0000
	MOV ES, AX
	MOV DI, 0X0000
	MOV AX, CS
	MOV DS, AX
	MOV SI, INT_VECTOR_TABLE
	MOV CX, INT_VECTOR_TABLE.END - INT_VECTOR_TABLE
	REP MOVSB
	RET

LOAD_BIOS_DATA_AREA:
	CLD
	MOV AX, 0X0040
	MOV ES, AX
	MOV DI, 0X0000
	MOV AX, CS
	MOV DS, AX
	MOV SI, BIOS_DATA_AREA
	MOV CX, BIOS_DATA_AREA.END - BIOS_DATA_AREA
	REP MOVSB
	RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;BIOS DATA AREA
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%INCLUDE "code/asm/bios_data.asm"


INT_VECTOR_TABLE:
	DW INT00, 0xF000
	DW INT01, 0xF000
	DW INT02, 0xF000
	DW INT03, 0xF000
	DW INT04, 0xF000
	DW INT05, 0xF000
	DW INT06, 0xF000
	DW INT07, 0xF000
	DW INT08, 0xF000
	DW INT09, 0xF000
	DW INT0A, 0xF000
	DW INT0B, 0xF000
	DW INT0C, 0xF000
	DW INT0D, 0xF000
	DW INT0E, 0xF000
	DW INT0F, 0xF000
	DW INT10, 0xF000
	DW INT11, 0xF000
	DW INT12, 0xF000
	DW INT13, 0xF000
	DW INT14, 0xF000
	DW INT15, 0xF000
	DW INT16, 0xF000
	DW INT17, 0xF000
	DW INT18, 0xF000
	DW INT19, 0xF000
	DW INT1A, 0xF000
	DW INT1B, 0xF000
	DW INT1C, 0xF000
	DW INT1D, 0xF000
	DW INT1E, 0xF000
	DW INT1F, 0xF000
.END:
INT00: ;Divide by Zero
	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
	;HLT		;HLT PROCESSOR NOT SUPPORTED INTERRUPT
	IRET		;RETURN FROM INTERRUPT

INT01: ;Single Step
	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '1'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
;	HLT		;HLT PROCESSOR NOT SUPPORTED INTERRUPT
	IRET		;RETURN FROM INTERRUPT

INT02: ;Nonmaskable 
	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '2'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
;	HLT		;HLT PROCESSOR NOT SUPPORTED INTERRUPT
	IRET		;RETURN FROM INTERRUPT

INT03: ;Breakpoint
	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '3'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
;	HLT		;HLT PROCESSOR NOT SUPPORTED INTERRUPT
	IRET		;RETURN FROM INTERRUPT

INT04: ;Overflow
	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '4'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
;	HLT		;HLT PROCESSOR NOT SUPPORTED INTERRUPT
	IRET		;RETURN FROM INTERRUPT

INT05: ;Print Screen
	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '5'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
;	HLT		;HLT PROCESSOR NOT SUPPORTED INTERRUPT
	IRET		;RETURN FROM INTERRUPT

INT06: ;Reserved
	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '6'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
;	HLT		;HLT PROCESSOR NOT SUPPORTED INTERRUPT
	IRET		;RETURN FROM INTERRUPT

INT07: ;Reserved
	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '7'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
;	HLT		;HLT PROCESSOR NOT SUPPORTED INTERRUPT
	IRET		;RETURN FROM INTERRUPT

INT08: ;Reserved
	PUSH AX			;STORE AX
	PUSH BX			;STORE BX
	PUSH DS			;STORE DS
	MOV AX, 0X0040			;BIOS DATA AREA
	MOV DS, AX			;SET DATA SEGMENT 
	MOV BX, 0X006C			;SET BX TO TICK COUNTER
	INC WORD [BX]			;INC LOWER WORD TICK BY ONE
	CMP WORD [BX], 0X0000			;CMP TO 0 TO SEE IF ROLLED OVER 	
	JNZ .END_INT08			;IF NOT END
	ADD BX, 0X0002			;ADD 2 TO BX FOR NEXT WORD
	INC WORD [BX]			;INC UPPER WORD
  .END_INT08:				;END LABEL
	POP DS			;RESTORE DS
	POP BX			;RESTORE BX


    MOV AL, 0x20
    OUT 0x20, AL	
	POP AX			;RESTORE AX
	IRET			;RETURN FROM INTERRUPT	

;INT09:	
%INCLUDE "code/asm/int09.asm"

INT0A: ;Reserved
	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, 'A'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
	IRET		;RETURN FROM INTERRUPT	

INT0B: ;Communications
	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, 'B'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
	IRET		;RETURN FROM INTERRUPT	
	
INT0C: ;Communications
	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, 'C'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
	IRET		;RETURN FROM INTERRUPT			

INT0D: ;Disk
	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, 'D'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
	IRET	
INT0E: ;Disk
	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, 'E'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
	IRET	;RETURN FROM INTERRUPT
INT0F: ;Printer
	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, 'F'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
	IRET		;RETURN FROM INTERRUPTINT0F:

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INT 0X10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%INCLUDE "code/asm/int10.asm"

INT11: ;Equipment Check	
	PUSH DS			;STORE DS
	PUSH BX			;STORE BX
	MOV AX, 0X0040			;BIOS DATA AREA
	MOV DS, AX			;SET DATA SEGMENT
	MOV BX, 0X0010			;OFFSET 0X10 EQUIPMENT LIST
	MOV AX, WORD [BX]			;STORE EQUPMENT LIST AX
	POP BX			;RESTORE BX
	POP DS			;RESTORE DS
	IRET			;RETRUN
INT12: ;Memory	
	PUSH DS			;STORE DS
	PUSH BX			;STORE BX
	MOV AX, 0X0040			;BIOS DATA AREA
	MOV DS, AX			;SET DATA SEGMENT
	MOV BX, 0X0013			;OFFSET 0X13 FOR MEMORY SIZE
	MOV AX, WORD [BX]			;STORE MEMORY SIZE AX
	POP BX			;RESTORE BX
	POP DS			;RESTORE DS
	IRET			;RETRUN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INT 0X13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;%INCLUDE "code/asm/int13.asm"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INT14: ;Communications
;	IRET
;%INCLUDE "code/serial2.inc"
INT14:
	iret
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT15: ;Cassette
	MOV AL, 0X00			;AL = 0X00
	MOV AH, 0X86			;NO CASSETTE PRESENT
	STC			;NOT BIOS SUPPORTED
				;THIS IS HOW I RETURN THE CARRY FLAG
	PUSH AX			;STORE AX
	PUSHF			;STORE FLAGS
	POP AX			;GET AX = FLAGS
	PUSH BP			;STORE BP
	MOV BP, SP              ;Copy SP to BP for use as index
	ADD BP, 0X08			;offset 8
	AND WORD [BP], 0XFFFE			;CLEAR CF = ZER0
	AND AX, 0X0001			;ONLY CF 
	OR	WORD [BP], AX		;SET CF AX
	POP BP               			;RESTORE BASE POINTER
	POP AX			;RESTORE AX	
	IRET			;RETRUN	
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INT 0X16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%INCLUDE "code/asm/int16.asm"
	
INT17: ;Printer	
	IRET

INT18: ;Resident Basic
	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '1'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '8'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
;	HLT		;HLT PROCESSOR NOT SUPPORTED INTERRUPT
	IRET		;RETURN FROM INTERRUPT

INT19: ;Bootstrap
	JMP 0XFFFF:0X0000			;JUMPS TO BOOT CODE

INT1A: ;Time of Day
	PUSH DS
  	PUSH BX
	MOV AX, 0X0040			;BIOS DATA AREA
	MOV DS, AX			;SET DS
	MOV BX, 0X006C			;NUMBER OF CLICKS
	MOV DX, WORD [BX]			;SET DX CLICKS
	ADD BX, 0X0002
	MOV CX, WORD [BX]			;0X006E
	AND CX, 0x000F
	MOV AX, 0X0000			;
	POP BX
	POP DS
	IRET

INT1B: ;Keyboard Break
	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '1'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, 'B'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
;	HLT		;HLT PROCESSOR NOT SUPPORTED INTERRUPT
	IRET		;RETURN FROM INTERRUPT

INT1C: ;Timer Tick
	IRET			;RETURN FROM INTERRUPT

INT1D: ;Video Initialization 
	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '1'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, 'D'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
;	HLT		;HLT PROCESSOR NOT SUPPORTED INTERRUPT
	IRET		;RETURN FROM INTERRUPT

INT1E: ;Diskette Parameters
	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '1'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, 'E'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
;	HLT		;HLT PROCESSOR NOT SUPPORTED INTERRUPT
	IRET		;RETURN FROM INTERRUPT

INT1F: ;Video Graphics Characters
	MOV AH, 0X0E		;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '1'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, 'F'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
;	HLT		;HLT PROCESSOR NOT SUPPORTED INTERRUPT
	IRET		;RETURN FROM INTERRUPT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;EXTRA FUNCTIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%INCLUDE "code/asm/functions.asm"

