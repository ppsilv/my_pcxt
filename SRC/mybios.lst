     1                                  cpu	8086
     2                                  
     3                                  %include "macro.inc"
     1                              <1> ;=========================================================================
     2                              <1> ; macro.inc - Defines macros
     3                              <1> ;       setloc
     4                              <1> ;-------------------------------------------------------------------------
     5                              <1> ;
     6                              <1> ; Compiles with NASM 2.07, might work with other versions
     7                              <1> ;
     8                              <1> ; Copyright (C) 2011 - 2012 Sergey Kiselev.
     9                              <1> ; Provided for hobbyist use on the Xi 8088 board.
    10                              <1> ;
    11                              <1> ; This program is free software: you can redistribute it and/or modify
    12                              <1> ; it under the terms of the GNU General Public License as published by
    13                              <1> ; the Free Software Foundation, either version 3 of the License, or
    14                              <1> ; (at your option) any later version.
    15                              <1> ;
    16                              <1> ; This program is distributed in the hope that it will be useful,
    17                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
    18                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    19                              <1> ; GNU General Public License for more details.
    20                              <1> ;
    21                              <1> ; You should have received a copy of the GNU General Public License
    22                              <1> ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
    23                              <1> ;
    24                              <1> ;=========================================================================
    25                              <1> 
    26                              <1> ;=========================================================================
    27                              <1> ; setloc - Set location. Insert 0FFh bytes until specifed location is reached.
    28                              <1> ;-------------------------------------------------------------------------
    29                              <1> %imacro setloc  1.nolist
    30                              <1> %assign pad_bytes (%1-($-$$)-START)
    31                              <1> %if pad_bytes < 0
    32                              <1> %assign over_bytes -pad_bytes
    33                              <1> %error Preceding code extends beyond setloc location by over_bytes bytes
    34                              <1> %endif
    35                              <1> %if pad_bytes > 0
    36                              <1> %warning Inserting pad_bytes bytes
    37                              <1>  times  pad_bytes db 0FFh
    38                              <1> %endif
    39                              <1> %endm
     4                                  
     5                                  %define	START		0x0000		
     6                                  %define DATE		'22/11/24'
     7                                  %define MODEL_BYTE	0FEh		; IBM PC/XT
     8                                  %define VERSION		'1.0.00'	; BIOS version
     9                                  
    10                                  org	START		
    11                                  
    12                                  
    13 00000000 585420383038382042-     welcome		db	"XT 8088 BIOS, Version "
    13 00000009 494F532C2056657273-
    13 00000012 696F6E20           
    14 00000016 312E302E3030            			db	VERSION
    15 0000001C 2E200D                  			db	". ", 0Dh
    16 0000001F 5061756C6F2053696C-     			db	"Paulo Silva(pgordao) - Copyright (C) 2024", 0Dh
    16 00000028 76612870676F726461-
    16 00000031 6F29202D20436F7079-
    16 0000003A 726967687420284329-
    16 00000043 20323032340D       
    17 00000049 43505520383038382D-     			db	"CPU 8088-2   board: 8088BOAD2447-RA  ", 0Dh
    17 00000052 32202020626F617264-
    17 0000005B 3A2038303838424F41-
    17 00000064 44323434372D524120-
    17 0000006D 200D               
    18 0000006F 38303838204D6F6E69-     			db	"8088 MonitorV0 V ",VERSION ," 2447A 512 Sram Rom at29C512", 0Dh
    18 00000078 746F72563020562031-
    18 00000081 2E302E303020323434-
    18 0000008A 374120353132205372-
    18 00000093 616D20526F6D206174-
    18 0000009C 3239433531320D     
    19 000000A3 0D4120746F74616C20-     			db      0dh,"A total of 64k minimum are ok..", 0Dh, 0
    19 000000AC 6F662036346B206D69-
    19 000000B5 6E696D756D20617265-
    19 000000BE 206F6B2E2E0D00     
    20                                  
    21                                  
    22 000000C5 FF<rep DF3Bh>           setloc	0E000h
    22          ******************       warning: Inserting 57147 bytes [-w+user]
    23                                  reset:
    24 0000E000 FA                                      cli
    25 0000E001 B84000                      		mov ax,0x40
    26 0000E004 8ED8                        		mov ds,ax
    27 0000E006 C70672000000            		mov word [0x72],0x0
    28 0000E00C 31C0                        		xor ax,ax
    29 0000E00E 7248                        		jc l0xb3
    30 0000E010 7046                        		jo l0xb3
    31 0000E012 7844                        		js l0xb3
    32 0000E014 7542                        		jnz l0xb3
    33 0000E016 7B40                        		jpo l0xb3
    34 0000E018 83C001                      		add ax,0x1
    35 0000E01B 743B                        		jz l0xb3
    36 0000E01D 7A39                        		jpe l0xb3
    37 0000E01F 2D0280                      		sub ax,0x8002
    38 0000E022 7834                        		js l0xb3
    39 0000E024 40                          		inc ax
    40 0000E025 7131                        		jno l0xb3
    41 0000E027 D1E0                        		shl ax,1
    42 0000E029 732D                        		jnc l0xb3
    43 0000E02B 752B                        		jnz l0xb3
    44 0000E02D D1E0                        		shl ax,1
    45 0000E02F 7227                        		jc l0xb3   
    46 0000E031 BB5555                      		mov bx,0x5555
    47 0000E034 89DD                    l0x8f:    	mov bp,bx
    48 0000E036 89E9                        		mov cx,bp
    49 0000E038 89CC                        		mov sp,cx
    50 0000E03A 89E2                        		mov dx,sp
    51 0000E03C 8ED2                        		mov ss,dx
    52 0000E03E 8CD6                        		mov si,ss
    53 0000E040 8EC6                        		mov es,si
    54 0000E042 8CC7                        		mov di,es
    55 0000E044 8EDF                        		mov ds,di
    56 0000E046 8CD8                        		mov ax,ds
    57 0000E048 3D5555                      		cmp ax,0x5555
    58 0000E04B 7506                        		jnz l0xae
    59 0000E04D F7D0                        		not ax
    60 0000E04F 89C3                        		mov bx,ax
    61 0000E051 EBE1                        		jmp short l0x8f
    62 0000E053 35AAAA                  l0xae: 		xor ax,0xaaaa
    63 0000E056 7403                        		jz l0xb4
    64 0000E058 E92602                  l0xb3: 		jmp led3blinks
    65 0000E05B FC                      l0xb4: 		cld                     
    66                                                  ;Verify if the board has at least 32kbytes of RAM
    67 0000E05C E9A803                                  jmp testFirst64kb
    68                                  
    69                                  initBios:
    70 0000E05F B80000                          mov ax, 0x0000
    71 0000E062 8EC0                            mov es, ax
    72 0000E064 8ED0                            mov ss, ax                  ; Segmento Stack
    73 0000E066 B800F0                          mov ax, 0xF000
    74 0000E069 8ED8                            mov ds, ax
    75 0000E06B 8EC8                    	mov cs, ax
    76                                          ;Put 0x8000 in stack pointer top of the first 32kbytes of mem
    77 0000E06D 31E4                            xor sp, sp          ;The minimum of 64k of ram are OK.
    78 0000E06F 31C0                            xor ax, ax              ; Put flags in known state
    79 0000E071 50                              PUSH AX
    80 0000E072 9D                              POPF
    81 0000E073 89C4                            MOV SP,AX    
    82                                  
    83                                     
    84                                  ;******************************************************
    85                                  ; END INITIALIZATION
    86                                  ;======================================================
    87                                  ;PUT MAIN CODE HERE
    88 0000E075 E82A00                  		call configure_uart
    89                                  
    90 0000E078 E81B01                  		call scr_clear
    91 0000E07B BB[0000]                		mov  bx, welcome
    92 0000E07E E8DE00                  		call print2
    93                                  
    94 0000E081 E80F04                  		call memoryTest
    95                                  
    96 0000E084 E9B401                  		jmp ledblinkOk
    97                                  
    98                                  %include "DRV16C550_8088.asm"
     1                              <1>         CPU 8086
     2                              <1>    
     3                              <1> 
     4                              <1> ; Port
     5 0000E087 F803                <1> COM1:	DW		0x3F8
     6                              <1> ; Here are the port numbers for various UART registers:
     7                              <1> uart_tx_rx 		EQU  0x3f8 ; 0 DLAB = 0 for Regs. TX and RX
     8                              <1> uart_DLL 		EQU  0x3f8 ; 0 DLAB = 1 Divisor lacth low
     9                              <1> uart_IER 		EQU  0x3f9 ; 1 DLAB = 0 Interrupt Enable Register
    10                              <1> uart_DLH 		EQU  0x3f9 ; 1 DLAB = 1 Divisor lacth high
    11                              <1> uart_ISR 		EQU  0x3fa ; 2 IIR Interrupt Ident. Register READ ONLY
    12                              <1> uart_FCR 		EQU  0x3fa ; 2 Fifo Control Resgister WRITE ONLY
    13                              <1> uart_LCR 		EQU  0x3fb ; 3 Line Control Register
    14                              <1> uart_MCR 		EQU  0x3fc ; 4 Modem Control Register
    15                              <1> uart_LSR 		EQU  0x3fd ; 5 Line Status Register
    16                              <1> uart_MSR 		EQU  0x3fe ; 6 Modem Status Register
    17                              <1> uart_scratch 	EQU  0x3ff ; 7 SCR Scratch Register
    18                              <1> 
    19                              <1> UART_FREQUENCY		equ 4915000
    20                              <1> ;Fomula UART_FREQUENCY/(  9600 * 16)
    21                              <1> ;Baudrates
    22                              <1> UART_BAUD_9600		EQU 32
    23                              <1> UART_BAUD_19200		EQU 16
    24                              <1> UART_BAUD_38400		EQU  8
    25                              <1> UART_BAUD_56800		EQU  5
    26                              <1> UART_BAUD_115200	EQU  3
    27                              <1> UART_BAUD_230400	EQU  1
    28                              <1> 
    29                              <1> UART_TX_WAIT		EQU	0x7fff		; Count before a TX times out
    30                              <1> 
    31 0000E089 53657269616C206472- <1> msg0_01:   db "Serial driver for 16C550",0
    31 0000E092 6976657220666F7220- <1>
    31 0000E09B 31364335353000      <1>
    32                              <1> ;configure_uart
    33                              <1> ;Parameters:None
    34                              <1> ;			
    35                              <1> ;			
    36                              <1> configure_uart:
    37 0000E0A2 B9FF1F              <1> 			mov cx, 0x1fff
    38 0000E0A5 E8DE00              <1> 			call	basicDelay
    39 0000E0A8 B000                <1> 			MOV		AL,0x0	 		;
    40 0000E0AA BAF903              <1> 			MOV		DX, uart_IER
    41 0000E0AD EE                  <1> 			OUT  	DX,	AL	; Disable interrupts
    42                              <1> 
    43 0000E0AE B91F00              <1> 			mov cx, 0x1f
    44 0000E0B1 E8D200              <1> 			call	basicDelay
    45                              <1> 
    46 0000E0B4 B080                <1> 			MOV		AL, 0x80			;
    47 0000E0B6 BAFB03              <1> 			MOV		DX, uart_LCR
    48 0000E0B9 EE                  <1> 			OUT     DX,	AL 	; Turn DLAB on
    49 0000E0BA B91F00              <1> 			mov cx, 0x1f
    50 0000E0BD E8C600              <1> 			call	basicDelay
    51                              <1> 
    52 0000E0C0 B008                <1> 			MOV		AL, UART_BAUD_38400 ;0x08
    53 0000E0C2 BAF803              <1> 			MOV		DX, uart_DLL
    54 0000E0C5 EE                  <1> 			OUT     DX,   AL	; Set divisor low
    55 0000E0C6 B91F00              <1> 			mov cx, 0x1f
    56 0000E0C9 E8BA00              <1> 			call	basicDelay
    57                              <1> 
    58 0000E0CC B000                <1> 			MOV		AL, 0x00		;
    59 0000E0CE BAF903              <1> 			MOV		DX, uart_DLH
    60 0000E0D1 EE                  <1> 			OUT     DX,	AL	; Set divisor high
    61 0000E0D2 B91F00              <1> 			mov cx, 0x1f
    62 0000E0D5 E8AE00              <1> 			call	basicDelay
    63                              <1> 
    64 0000E0D8 B003                <1> 			MOV     AL, 0x03	; AH	
    65 0000E0DA BAFB03              <1> 			MOV		DX, uart_LCR
    66 0000E0DD EE                  <1> 			OUT     DX,	AL	; Write out flow control bits 8,1,N
    67 0000E0DE B91F00              <1> 			mov cx, 0x1f
    68 0000E0E1 E8A200              <1> 			call	basicDelay
    69                              <1> 
    70 0000E0E4 B081                <1> 			MOV 	AL,0x81			;
    71 0000E0E6 BAFA03              <1> 			MOV		DX, uart_ISR
    72 0000E0E9 EE                  <1> 			OUT     DX,	AL	; Turn on FIFO, with trigger level of 8.
    73                              <1> 								                ; This turn on the 16bytes buffer!
    74 0000E0EA C3                  <1> 			RET
    75                              <1> ;UART_RX:
    76                              <1> ;Parameters: 
    77                              <1> ;			AL = return the available character
    78                              <1> ;			If al returns with a valid char flag carry is set, otherwise
    79                              <1> ;			flag carry is clear
    80                              <1> UART_RX:	
    81 0000E0EB BAFD03              <1> 			MOV DX, uart_LSR
    82 0000E0EE EC                  <1> 			IN	AL, DX	 		; Get the line status register
    83 0000E0EF 2401                <1> 			AND AL, 0x01		; Check for characters in buffer
    84 0000E0F1 F8                  <1> 			CLC 				; Clear carry
    85 0000E0F2 7405                <1> 			JZ	END				; Just ret (with carry clear) if no characters
    86 0000E0F4 BAF803              <1> 			MOV DX, uart_tx_rx
    87 0000E0F7 EC                  <1> 			IN	AL, DX			; Read the character from the UART receive buffer
    88 0000E0F8 F9                  <1> 			STC 				; Set the carry flag
    89                              <1> END:			
    90 0000E0F9 C3                  <1> 			RET
    91                              <1> 
    92                              <1> UART_RX_blct:	
    93 0000E0FA BAFD03              <1> 			MOV DX, uart_LSR
    94 0000E0FD EC                  <1> 			IN	AL, DX	 		; Get the line status register
    95 0000E0FE 2401                <1> 			AND AL, 0x01		; Check for characters in buffer
    96 0000E100 74F8                <1> 			JZ	UART_RX_blct	; Just loopif no characters
    97 0000E102 BAF803              <1> 			MOV DX, uart_tx_rx
    98 0000E105 EC                  <1> 			IN	AL, DX			; Read the character from the UART receive buffer
    99 0000E106 C3                  <1> 			RET
   100                              <1> 
   101                              <1> 
   102                              <1> printch:
   103                              <1> UART_TX:	
   104 0000E107 52                  <1> 			PUSH DX
   105 0000E108 51                  <1> 			PUSH CX 	
   106 0000E109 53                  <1> 			PUSH BX
   107 0000E10A 50                  <1> 			PUSH AX
   108 0000E10B BBFF7F              <1> 			MOV BX, UART_TX_WAIT	; Set CB to the transmit timeout
   109                              <1> LOOP_UART_TX:
   110 0000E10E BAFD03              <1> 			MOV DX, uart_LSR
   111 0000E111 EC                  <1> 			IN	AL,	DX 				; Get the line status register
   112 0000E112 2460                <1> 			AND AL, 0x60			; Check for TX empty
   113 0000E114 750D                <1> 			JNZ	OUT_UART_TX			; If set, then TX is empty, goto transmit
   114 0000E116 B9FF17              <1> 			mov	cx, 0x17ff
   115 0000E119 E86A00              <1> 			call basicDelay
   116 0000E11C 4B                  <1> 			DEC	BX
   117 0000E11D 75EF                <1> 			JNZ LOOP_UART_TX		; Otherwise loop
   118 0000E11F 58                  <1> 			POP	AX					; We've timed out at this point so
   119 0000E120 F8                  <1> 			CLC						; Clear the carry flag and preserve AX
   120 0000E121 EB10                <1> 			JMP FIM_UART_TX
   121                              <1> OUT_UART_TX:
   122 0000E123 58                  <1> 			POP	AX					; Good to send at this point, so	
   123 0000E124 3C0D                <1> 			CMP AL, 0x0D
   124 0000E126 740F                <1> 			JZ  println
   125 0000E128 BAF803              <1> 			MOV	DX, uart_tx_rx
   126 0000E12B EE                  <1> 			OUT	DX, AL		; Write the character to the UART transmit buffer
   127 0000E12C B9FF02              <1> 			mov	cx, 0x2ff
   128 0000E12F E85400              <1> 			call basicDelay
   129 0000E132 F9                  <1> 			STC						; Set carry flag
   130                              <1> FIM_UART_TX:
   131 0000E133 5B                  <1> 			POP BX
   132 0000E134 59                  <1> 			POP CX
   133 0000E135 5A                  <1> 			POP DX
   134 0000E136 C3                  <1> 			RET
   135                              <1> println:
   136 0000E137 E80300              <1> 			call printlf
   137 0000E13A F9                  <1> 			STC						; Set carry flag
   138 0000E13B EBF6                <1> 			JMP FIM_UART_TX
   139                              <1> 
   140                              <1> printlf:
   141 0000E13D BAF803              <1> 			MOV	DX, uart_tx_rx
   142 0000E140 EE                  <1> 			OUT	DX, AL		; Send 0x0D
   143 0000E141 B9FF00              <1> 			mov	cx, 0xff
   144 0000E144 E83F00              <1> 			call basicDelay
   145 0000E147 B00A                <1> 			MOV AL, 0x0A	; Send 0x0A
   146 0000E149 BAF803              <1> 			MOV	DX, uart_tx_rx
   147 0000E14C EE                  <1> 			OUT	DX, AL		; Write the character to the UART transmit buffer
   148 0000E14D B9FF00              <1> 			mov	CX, 0xff
   149 0000E150 E83300              <1> 			call basicDelay
   150 0000E153 C3                  <1> 			ret
   151                              <1> ;printCH
   152                              <1> ;parameters:
   153                              <1> ;          bx = message address
   154                              <1> ;
   155                              <1> printCH:
   156 0000E154 BAF803              <1> 	MOV	DX, uart_tx_rx
   157 0000E157 EE                  <1>    	OUT	DX, AL
   158 0000E158 B9FF00              <1> 	mov	CX, 0xff
   159                              <1> .basicDelay:	
   160 0000E15B 49                  <1>     dec cx
   161 0000E15C 75FD                <1>     jnz .basicDelay
   162 0000E15E C3                  <1> 	ret
   163                              <1> 
   164                              <1> 
   165                              <1> ;;print2
   166                              <1> print2:
   167 0000E15F 3E8A07              <1>         	mov  al,byte ds:[bx]
   168 0000E162 3C00                <1>         	cmp  al,0h
   169 0000E164 7408                <1>         	jz   .fimPrint
   170                              <1> .cont:
   171 0000E166 E89EFF              <1> 			call UART_TX
   172 0000E169 73FB                <1> 			JNC	.cont
   173                              <1> 
   174 0000E16B 43                  <1>         	inc  bx
   175 0000E16C EBF1                <1>         	jmp  print2
   176 0000E16E C3                  <1> .fimPrint:   ret		
   177                              <1> 
   178                              <1> 
   179                              <1> print3:
   180 0000E16F 1E                  <1> 			push DS
   181 0000E170 B800F0              <1> 			mov  AX, 0xF000
   182 0000E173 8ED8                <1> 			mov  DS, AX
   183 0000E175 3E8A07              <1>         	mov  al, byte ds:[bx]
   184 0000E178 3C00                <1>         	cmp  al, 0h
   185 0000E17A 7409                <1>         	jz   .fimPrint3
   186                              <1> .cont3:
   187 0000E17C E888FF              <1> 			call UART_TX
   188 0000E17F 73FB                <1> 			JNC	 .cont3
   189                              <1> 
   190 0000E181 43                  <1>         	inc  bx
   191 0000E182 EBEB                <1>         	jmp  print3
   192 0000E184 1F                  <1> 			pop  DS
   193 0000E185 C3                  <1> .fimPrint3:   ret		
   194                              <1> 
   195                              <1> 
   196                              <1> ;print3:
   197                              <1> ;        	mov  al,byte ds:[bx]
   198                              <1> ;        	cmp  al,0h
   199                              <1> ;        	jz   fimPrint3
   200                              <1> ;
   201                              <1> ;			MOV	DX, uart_tx_rx
   202                              <1> ;			OUT	DX, AL		; Write the character to the UART transmit buffer
   203                              <1> ;			mov	cx, 0xff
   204                              <1> ;			call basicDelay
   205                              <1> ;
   206                              <1> ;        	inc  bx
   207                              <1> ;        	jmp  print2
   208                              <1> ;fimPrint3:   ret		
   209                              <1> 
   210                              <1> 	
   211                              <1> basicDelay:
   212 0000E186 49                  <1>         dec cx
   213 0000E187 75FD                <1>         jnz basicDelay
   214 0000E189 C3                  <1>         ret
    99                                  %include "screen.asm"
     1                              <1> 
     2 0000E18A 1B5B324A00          <1> cls     db 0x1B,"[2J",0
     3 0000E18F 1B5B213B214800      <1> curpos  db 0x1B,"[!;!H",0
     4                              <1> 
     5                              <1> ;=====================
     6                              <1> ; ESC [ 2 J
     7                              <1> ;
     8                              <1> scr_clear:
     9 0000E196 BB[8AE1]            <1>         mov	bx, cls
    10 0000E199 E8C3FF              <1>         call print2	
    11 0000E19C C3                  <1>         ret
    12                              <1> ;=====================
    13                              <1> ; ESC [ Pl ; Pc H
    14                              <1> ; input:
    15                              <1> ;	dh = y position
    16                              <1> ; 	dl = x position
    17                              <1> ; MARK: scr_goto
    18                              <1> scr_goto:
    19 0000E19D 1E                  <1>         push DS
    20 0000E19E B80000              <1>         mov AX, 0x0
    21 0000E1A1 8ED8                <1>         mov DS, AX
    22 0000E1A3 89C3                <1>         mov bx, AX
    23 0000E1A5 3EC6071B            <1>         mov byte ds:[bx],0x1B
    24 0000E1A9 43                  <1>         inc bx
    25 0000E1AA 3EC6075B            <1>         mov byte ds:[bx],'['
    26 0000E1AE 43                  <1>         inc bx
    27 0000E1AF 3EC6070A            <1>         mov byte ds:[bx],10
    28 0000E1B3 43                  <1>         inc bx
    29 0000E1B4 3EC6073B            <1>         mov byte ds:[bx],';'
    30 0000E1B8 43                  <1>         inc bx
    31 0000E1B9 3EC6070A            <1>         mov byte ds:[bx],10
    32 0000E1BD 43                  <1>         inc bx
    33 0000E1BE 3EC60748            <1>         mov byte ds:[bx],'H'  
    34 0000E1C2 43                  <1>         inc bx
    35 0000E1C3 3EC60700            <1>         mov byte ds:[bx],0x0
    36                              <1> 
    37                              <1> 
    38 0000E1C7 B80000              <1>         mov AX, 0x0
    39 0000E1CA 89C3                <1>         mov bx, AX
    40 0000E1CC E890FF              <1>         call print2
    41 0000E1CF 1F                  <1>         POP DS
    42 0000E1D0 C3                  <1> 		ret
    43                              <1> 
    44 0000E1D1 666E30300D00        <1> s123 db "fn00",0dh,0
    45 0000E1D7 666E30310D00        <1> s124 db "fn01",0dh,0
    46 0000E1DD 666E30320D00        <1> s125 db "fn02",0dh,0
    47 0000E1E3 666E30330D00        <1> s126 db "fn03",0dh,0
    48 0000E1E9 666E30340D00        <1> s127 db "fn04",0dh,0
    49 0000E1EF 666E30350D00        <1> s128 db "fn05",0dh,0
    50                              <1> 
    51                              <1> TESTE:
    52 0000E1F5 E80FFF              <1>         call printch
    53                              <1> 
    54 0000E1F8 3C30                <1>         cmp   al, '0'
    55 0000E1FA 7415                <1>         jz    .fn00
    56 0000E1FC 3C31                <1>         cmp   al, '1'
    57 0000E1FE 7418                <1>         jz    .fn01
    58 0000E200 3C32                <1>         cmp   al, '2'
    59 0000E202 741B                <1>         jz    .fn02
    60 0000E204 3C33                <1>         cmp   al, '3'
    61 0000E206 741E                <1>         jz    .fn03
    62 0000E208 3C34                <1>         cmp   al, '4'
    63 0000E20A 7421                <1>         jz    .fn04
    64 0000E20C 3C35                <1>         cmp   al, '5'
    65 0000E20E 7424                <1>         jz    .fn05
    66 0000E210 C3                  <1>         ret        
    67                              <1> 
    68                              <1> .fn00: 
    69 0000E211 BB[D1E1]            <1>         mov  bx, s123
    70 0000E214 E848FF              <1>         call print2
    71 0000E217 C3                  <1>         ret
    72                              <1> .fn01: 
    73 0000E218 BB[D7E1]            <1>         mov  bx, s124
    74 0000E21B E841FF              <1>         call print2
    75 0000E21E C3                  <1>         ret        
    76                              <1> .fn02: 
    77 0000E21F BB[DDE1]            <1>         mov  bx, s125
    78 0000E222 E83AFF              <1>         call print2
    79 0000E225 C3                  <1>         ret
    80                              <1> .fn03: 
    81 0000E226 BB[E3E1]            <1>         mov  bx, s126
    82 0000E229 E833FF              <1>         call print2
    83 0000E22C C3                  <1>         ret
    84                              <1> .fn04:   
    85 0000E22D BB[E9E1]            <1>         mov  bx, s127
    86 0000E230 E82CFF              <1>         call print2
    87 0000E233 C3                  <1>         ret
    88                              <1> .fn05: 
    89 0000E234 BB[EFE1]            <1>         mov  bx, s128
    90 0000E237 E825FF              <1>         call print2
    91 0000E23A C3                  <1>         ret
    92                              <1> 
    93                              <1>         
    94                              <1> 
    95                              <1> 
   100                                  %include "errorLed.asm"
     1                              <1> 
     2                              <1> ledblinkOk:
     3                              <1> .loop0:
     4                              <1>           
     5 0000E23B B001                <1>                 mov     al, 0x01
     6 0000E23D E680                <1>                 out     0x80, al
     7 0000E23F B9FF3F              <1>                 mov     cx, 0x3fff
     8                              <1> .label01:
     9 0000E242 49                  <1>                 dec     cx
    10 0000E243 75FD                <1>                 jnz     .label01
    11 0000E245 B000                <1>                 mov     al, 0x00
    12 0000E247 E680                <1>                 out     0x80, al
    13 0000E249 B9FF7F              <1>                 mov     cx, 0x7fff
    14                              <1> .label02:
    15 0000E24C 49                  <1>                 dec     cx
    16 0000E24D 75FD                <1>                 jnz     .label02
    17                              <1> 
    18 0000E24F E899FE              <1>                 call    UART_RX
    19 0000E252 73E7                <1>                 jnc     .loop0
    20 0000E254 E8B0FE              <1>                 call    printch
    21 0000E257 EBE2                <1>                 jmp     .loop0         
    22                              <1> 
    23                              <1> led2blinks:
    24                              <1> .loop0:
    25 0000E259 BB0300              <1>                 mov     bx, 3
    26                              <1> .loop:            
    27 0000E25C B001                <1>                 mov     al, 0x01
    28 0000E25E E680                <1>                 out     0x80, al
    29 0000E260 B9FFFF              <1>                 mov     cx, 0xffff
    30                              <1> .label01:
    31 0000E263 49                  <1>                 dec     cx
    32 0000E264 75FD                <1>                 jnz     .label01
    33 0000E266 B000                <1>                 mov     al, 0x00
    34 0000E268 E680                <1>                 out     0x80, al
    35 0000E26A B9FFFF              <1>                 mov     cx, 0xffff
    36                              <1> .label02:
    37 0000E26D 49                  <1>                 dec     cx
    38 0000E26E 75FD                <1>                 jnz     .label02
    39                              <1> 
    40 0000E270 4B                  <1>                 dec     bx
    41 0000E271 75E9                <1>                 jnz     .loop
    42                              <1> ;                mov     al, 0x01
    43                              <1> ;                out     0x80, al
    44                              <1>                 
    45 0000E273 BB0500              <1>                 mov     bx, 5
    46                              <1> .longDelay:                
    47 0000E276 B9FFFF              <1>                 mov     cx, 0xffff
    48                              <1> .labelLD:
    49 0000E279 49                  <1>                 dec     cx
    50 0000E27A 75FD                <1>                 jnz     .labelLD
    51 0000E27C 4B                  <1>                 dec     bx
    52 0000E27D 75F7                <1>                 jnz     .longDelay
    53                              <1>                 ;mov     bx, 3 
    54 0000E27F EBD8                <1>                 jmp     .loop0         
    55                              <1> 
    56                              <1> led3blinks:
    57                              <1> .loop0:
    58 0000E281 BB0300              <1>                 mov     bx, 3
    59                              <1> .loop:            
    60 0000E284 B001                <1>                 mov     al, 0x01
    61 0000E286 E680                <1>                 out     0x80, al
    62 0000E288 B9FFFF              <1>                 mov     cx, 0xffff
    63                              <1> .label01:
    64 0000E28B 49                  <1>                 dec     cx
    65 0000E28C 75FD                <1>                 jnz     .label01
    66 0000E28E B000                <1>                 mov     al, 0x00
    67 0000E290 E680                <1>                 out     0x80, al
    68 0000E292 B9FFFF              <1>                 mov     cx, 0xffff
    69                              <1> .label02:
    70 0000E295 49                  <1>                 dec     cx
    71 0000E296 75FD                <1>                 jnz     .label02
    72                              <1> 
    73 0000E298 4B                  <1>                 dec     bx
    74 0000E299 75E9                <1>                 jnz     .loop
    75                              <1> ;                mov     al, 0x01
    76                              <1> ;                out     0x80, al
    77                              <1>                 
    78 0000E29B BB0500              <1>                 mov     bx, 5
    79                              <1> .longDelay:                
    80 0000E29E B9FFFF              <1>                 mov     cx, 0xffff
    81                              <1> .labelLD:
    82 0000E2A1 49                  <1>                 dec     cx
    83 0000E2A2 75FD                <1>                 jnz     .labelLD
    84 0000E2A4 4B                  <1>                 dec     bx
    85 0000E2A5 75F7                <1>                 jnz     .longDelay
    86                              <1>                 ;mov     bx, 3 
    87 0000E2A7 EBD8                <1>                 jmp     .loop0         
    88                              <1> 
    89                              <1> led4blinks:
    90                              <1> .loop0:
    91 0000E2A9 BB0400              <1>                 mov     bx, 4
    92                              <1> .loop:            
    93 0000E2AC B001                <1>                 mov     al, 0x01
    94 0000E2AE E680                <1>                 out     0x80, al
    95 0000E2B0 B9FFFF              <1>                 mov     cx, 0xffff
    96                              <1> .label01:
    97 0000E2B3 49                  <1>                 dec     cx
    98 0000E2B4 75FD                <1>                 jnz     .label01
    99 0000E2B6 B000                <1>                 mov     al, 0x00
   100 0000E2B8 E680                <1>                 out     0x80, al
   101 0000E2BA B9FFFF              <1>                 mov     cx, 0xffff
   102                              <1> .label02:
   103 0000E2BD 49                  <1>                 dec     cx
   104 0000E2BE 75FD                <1>                 jnz     .label02
   105                              <1> 
   106 0000E2C0 4B                  <1>                 dec     bx
   107 0000E2C1 75E9                <1>                 jnz     .loop
   108                              <1> ;                mov     al, 0x01
   109                              <1> ;                out     0x80, al
   110                              <1>                 
   111 0000E2C3 BB0500              <1>                 mov     bx, 5
   112                              <1> .longDelay:                
   113 0000E2C6 B9FFFF              <1>                 mov     cx, 0xffff
   114                              <1> .labelLD:
   115 0000E2C9 49                  <1>                 dec     cx
   116 0000E2CA 75FD                <1>                 jnz     .labelLD
   117 0000E2CC 4B                  <1>                 dec     bx
   118 0000E2CD 75F7                <1>                 jnz     .longDelay
   119                              <1>                 ;mov     bx, 3 
   120 0000E2CF EBD8                <1>                 jmp     .loop0         
   101                                  %include "testSram.asm"
     1                              <1> ;-------------------------------------------------------------------------
     2                              <1> %define MIN_RAM_SIZE    64              ; At least 32 KiB to boot the system
     3 0000E2D1 54657374696E67206D- <1> testMem:        db      "Testing memory:",0Dh , 0
     3 0000E2DA 656D6F72793A0D00    <1>
     4 0000E2E2 313030303020746F20- <1> bloco01:        db      "10000 to 1FFFF", 0     ;128k
     4 0000E2EB 314646464600        <1>
     5 0000E2F1 323030303020746F20- <1> bloco02:        db      "20000 to 2FFFF", 0     ;192k
     5 0000E2FA 324646464600        <1>
     6 0000E300 333030303020746F20- <1> bloco03:        db      "30000 to 3FFFF", 0     ;256k
     6 0000E309 334646464600        <1>
     7 0000E30F 343030303020746F20- <1> bloco04:        db      "40000 to 4FFFF", 0     ;320k
     7 0000E318 344646464600        <1>
     8 0000E31E 353030303020746F20- <1> bloco05:        db      "50000 to 5FFFF", 0     ;384k
     8 0000E327 354646464600        <1>
     9 0000E32D 363030303020746F20- <1> bloco06:        db      "60000 to 6FFFF", 0     ;448k
     9 0000E336 364646464600        <1>
    10 0000E33C 373030303020746F20- <1> bloco07:        db      "70000 to 7FFFF", 0     ;512k
    10 0000E345 374646464600        <1>
    11 0000E34B 207365676D656E7420- <1> blocoOK:        db      " segment OK", 0Dh, 0
    11 0000E354 4F4B0D00            <1>
    12 0000E358 207365676D656E7420- <1> blocoNOK:       db      " segment NOT exists", 0Dh, 0
    12 0000E361 4E4F54206578697374- <1>
    12 0000E36A 730D00              <1>
    13 0000E36D 546F74616C206F6620- <1> totalMem:       db      "Total of memory: ",0
    13 0000E376 6D656D6F72793A2000  <1>
    14 0000E37F 3036342E303030204B- <1> qtdMem0:        db      "064.000 KBytes.", 0Dh, 0
    14 0000E388 42797465732E0D00    <1>
    15 0000E390 3133312E303732204B- <1> qtdMem1:        db      "131.072 KBytes.", 0Dh, 0
    15 0000E399 42797465732E0D00    <1>
    16 0000E3A1 3139362E363038204B- <1> qtdMem2:        db      "196.608 KBytes.", 0Dh, 0
    16 0000E3AA 42797465732E0D00    <1>
    17 0000E3B2 3236322E313434204B- <1> qtdMem3:        db      "262.144 KBytes.", 0Dh, 0
    17 0000E3BB 42797465732E0D00    <1>
    18 0000E3C3 3332372E363830204B- <1> qtdMem4:        db      "327.680 KBytes.", 0Dh, 0
    18 0000E3CC 42797465732E0D00    <1>
    19 0000E3D4 3339332E323136204B- <1> qtdMem5:        db      "393.216 KBytes.", 0Dh, 0
    19 0000E3DD 42797465732E0D00    <1>
    20 0000E3E5 3435382E373532204B- <1> qtdMem6:        db      "458.752 KBytes.", 0Dh, 0
    20 0000E3EE 42797465732E0D00    <1>
    21 0000E3F6 3532342E323838204B- <1> qtdMem7:        db      "524.288 KBytes.", 0Dh, 0
    21 0000E3FF 42797465732E0D00    <1>
    22                              <1> 
    23                              <1> flagMemOk		equ		0401h ;This location has 0 if memory block ok other wise has 1
    24                              <1> 
    25                              <1> ;-------------------------------------------------------------------------
    26                              <1> ; Test first 64 KiB (MIN_RAM_SIZE) of RAM
    27                              <1> testFirst64kb:
    28                              <1> 	;mov	al,e_low_ram_test
    29                              <1> 	;out	post_reg,al
    30 0000E407 31F6                <1> 	xor	si,si
    31 0000E409 31FF                <1> 	xor	di,di
    32 0000E40B 8EDF                <1> 	mov	ds,di
    33 0000E40D 8EC7                <1> 	mov	es,di
    34                              <1> 
    35                              <1> ;Inicio da carga do valor de AX
    36 0000E40F B8AA55              <1> 	mov	ax,55AAh		; first test pattern
    37 0000E412 B90080              <1> 	mov	cx,MIN_RAM_SIZE*512	; RAM size to test in words
    38 0000E415 F3AB                <1>     rep	stosw				; store test pattern
    39                              <1> ;Fim da carga do valor de AX        
    40                              <1> ;inicio da comparação    
    41                              <1> ;lodsw CX=total repetição, SI=Endereço a ser lido AX recebe o dado
    42 0000E417 B90080              <1> 	mov	cx,MIN_RAM_SIZE*512	; RAM size to test in words
    43                              <1> .1:
    44 0000E41A AD                  <1> 	lodsw
    45 0000E41B 3DAA55              <1> 	cmp	ax,55AAh		; compare to the test pattern
    46 0000E41E 7524                <1> 	jne	low_ram_fail
    47 0000E420 E2F8                <1> 	loop	.1
    48                              <1> ;Fim da comparação        
    49 0000E422 31F6                <1> 	xor	si,si
    50 0000E424 31FF                <1> 	xor	di,di
    51 0000E426 B855AA              <1> 	mov	ax,0AA55h		; second test pattern
    52 0000E429 B90080              <1> 	mov	cx,MIN_RAM_SIZE*512	; RAM size to test in words
    53 0000E42C F3AB                <1>     rep stosw				; store test pattern
    54 0000E42E B90080              <1> 	mov	cx,MIN_RAM_SIZE*512	; RAM size to test in words
    55                              <1> .2:
    56 0000E431 AD                  <1> 	lodsw
    57 0000E432 3D55AA              <1> 	cmp	ax,0AA55h		; compare to the test pattern
    58 0000E435 750D                <1> 	jne	low_ram_fail
    59 0000E437 E2F8                <1> 	loop	.2
    60 0000E439 31FF                <1> 	xor	di,di
    61 0000E43B 31C0                <1> 	xor	ax,ax			; zero
    62 0000E43D B90080              <1> 	mov	cx,MIN_RAM_SIZE*512	; RAM size to test in words
    63 0000E440 F3AB                <1>     rep stosw				; zero the memory
    64 0000E442 EB03                <1> 	jmp	low_ram_ok		; test passed
    65                              <1> 
    66                              <1> low_ram_fail:
    67                              <1> 	;mov	al,e_low_ram_fail	; test failed
    68                              <1> 	;out	post_reg,al
    69 0000E444 E912FE              <1>     jmp     led2blinks
    70                              <1> 
    71                              <1> ;-------------------------------------------------------------------------
    72                              <1> ;-------------------------------------------------------------------------
    73                              <1> ; Low memory test passed
    74                              <1> 
    75                              <1> low_ram_ok:
    76 0000E447 BB0104              <1>         mov     bx, 0x401
    77 0000E44A 3E8807              <1>         mov     byte ds:[bx], al
    78 0000E44D E90FFC              <1>         jmp     initBios
    79                              <1> 
    80                              <1> ;-------------------------------------------------------------------------
    81                              <1> ; Test of 64k bytes of memory
    82                              <1> ; Reg ds = segment to test
    83                              <1> ;	  es = segment to test
    84                              <1> ;
    85                              <1> test64kb:
    86                              <1> 	;mov	al,e_low_ram_test
    87                              <1> 	;out	post_reg,al
    88 0000E450 31F6                <1> 	xor	si,si
    89 0000E452 31FF                <1> 	xor	di,di
    90                              <1> 
    91                              <1> ;Inicio da carga do valor de AX
    92 0000E454 B8AA55              <1> 	mov	ax,55AAh		; first test pattern
    93 0000E457 B90080              <1> 	mov	cx,MIN_RAM_SIZE*512	; RAM size to test in words
    94 0000E45A F3AB                <1>     rep	stosw				; store test pattern
    95                              <1> ;Fim da carga do valor de AX        
    96                              <1> ;inicio da comparação    
    97                              <1> ;lodsw CX=total repetição, SI=Endereço a ser lido AX recebe o dado
    98 0000E45C B90080              <1> 	mov	cx,MIN_RAM_SIZE*512	; RAM size to test in words
    99                              <1> .1:
   100 0000E45F AD                  <1> 	lodsw
   101 0000E460 3DAA55              <1> 	cmp	ax,55AAh		; compare to the test pattern
   102 0000E463 7524                <1> 	jne	low_ram_fail1
   103 0000E465 E2F8                <1> 	loop	.1
   104                              <1> ;Fim da comparação        
   105 0000E467 31F6                <1> 	xor	si,si
   106 0000E469 31FF                <1> 	xor	di,di
   107 0000E46B B855AA              <1> 	mov	ax,0AA55h		; second test pattern
   108 0000E46E B90080              <1> 	mov	cx,MIN_RAM_SIZE*512	; RAM size to test in words
   109 0000E471 F3AB                <1>     rep stosw				; store test pattern
   110 0000E473 B90080              <1> 	mov	cx,MIN_RAM_SIZE*512	; RAM size to test in words
   111                              <1> .2:
   112 0000E476 AD                  <1> 	lodsw
   113 0000E477 3D55AA              <1> 	cmp	ax,0AA55h		; compare to the test pattern
   114 0000E47A 750D                <1> 	jne	low_ram_fail1
   115 0000E47C E2F8                <1> 	loop	.2
   116 0000E47E 31FF                <1> 	xor	di,di
   117 0000E480 31C0                <1> 	xor	ax,ax			; zero
   118 0000E482 B90080              <1> 	mov	cx,MIN_RAM_SIZE*512	; RAM size to test in words
   119 0000E485 F3AB                <1>     rep stosw				; zero the memory
   120 0000E487 EB02                <1> 	jmp	ram_ok		; test passed
   121                              <1> low_ram_fail1:
   122 0000E489 F9                  <1> 	STC 
   123 0000E48A C3                  <1> 	ret
   124                              <1> ;-------------------------------------------------------------------------
   125                              <1> ;-------------------------------------------------------------------------
   126                              <1> ; Low memory test passed
   127                              <1> 
   128                              <1> ram_ok:
   129                              <1> ;        mov ax, 0xF000
   130                              <1> ;        mov ds, ax
   131                              <1> ;        mov  bx, blocoOK
   132                              <1> ;        call print2
   133                              <1> 
   134 0000E48B BB0104              <1>         mov     bx, 0x401
   135 0000E48E 3E8807              <1>         mov     byte ds:[bx], al
   136 0000E491 F8                  <1> 		CLC
   137 0000E492 C3                  <1>         ret
   138                              <1> ;I know it could be better but I'm lazy and besides 
   139                              <1> ;I have a lot of flash memory so don't criticize me
   140                              <1> 
   141                              <1> memoryTest:
   142 0000E493 1E                  <1> 		push DS
   143 0000E494 B80000              <1> 		mov	 ax,0x0
   144 0000E497 8EC0                <1> 		mov  es, ax
   145 0000E499 B000                <1> 		mov  al,0
   146 0000E49B 26A20104            <1> 		mov  byte es:[flagMemOk], al
   147 0000E49F BB[D1E2]            <1> 		mov  bx, testMem
   148 0000E4A2 E8BAFC              <1> 		call print2
   149                              <1> 
   150                              <1> 		;Block 1 64K
   151 0000E4A5 BB[E2E2]            <1> 		mov  bx, bloco01
   152 0000E4A8 E8B4FC              <1> 		call print2
   153 0000E4AB B80010              <1> 		mov  ax, 0x1000
   154 0000E4AE 8ED8                <1> 		mov  ds, ax
   155 0000E4B0 8EC0                <1> 		mov  es, ax
   156 0000E4B2 E89BFF              <1> 		call test64kb
   157 0000E4B5 726A                <1> 		jc	 memoryTestEnd
   158 0000E4B7 E89900              <1> 		call segmentOK
   159 0000E4BA B80000              <1> 		mov	 ax,0x0
   160 0000E4BD 8EC0                <1> 		mov  es, ax
   161 0000E4BF 26FE060104          <1> 		inc byte es:[flagMemOk]
   162                              <1> 
   163                              <1> 		;Block 2 64K
   164 0000E4C4 BB[F1E2]            <1> 		mov  bx, bloco02
   165 0000E4C7 E895FC              <1> 		call print2
   166 0000E4CA B80020              <1> 		mov  ax, 0x2000
   167 0000E4CD 8ED8                <1> 		mov  ds, ax
   168 0000E4CF 8EC0                <1> 		mov  es, ax
   169 0000E4D1 E87CFF              <1> 		call    test64kb
   170 0000E4D4 724B                <1> 		jc	memoryTestEnd
   171 0000E4D6 E87A00              <1> 		call segmentOK
   172 0000E4D9 B80000              <1> 		mov	 ax,0x0
   173 0000E4DC 8EC0                <1> 		mov  es, ax
   174 0000E4DE 26FE060104          <1> 		inc byte es:[flagMemOk]
   175                              <1> 
   176                              <1> 		;Block 3 64K
   177 0000E4E3 BB[00E3]            <1> 		mov  bx, bloco03
   178 0000E4E6 E876FC              <1> 		call print2
   179 0000E4E9 B80030              <1> 		mov  ax, 0x3000
   180 0000E4EC 8ED8                <1> 		mov  ds, ax
   181 0000E4EE 8EC0                <1> 		mov  es, ax
   182 0000E4F0 E85DFF              <1> 		call    test64kb
   183 0000E4F3 722C                <1> 		jc	memoryTestEnd
   184 0000E4F5 E85B00              <1> 		call segmentOK
   185 0000E4F8 B80000              <1> 		mov	 ax,0x0
   186 0000E4FB 8EC0                <1> 		mov  es, ax
   187 0000E4FD 26FE060104          <1> 		inc byte es:[flagMemOk]
   188                              <1> 
   189 0000E502 BB[00E3]            <1> 		mov  bx, bloco03
   190 0000E505 E857FC              <1> 		call print2
   191 0000E508 B80030              <1> 		mov  ax, 0x3000
   192 0000E50B 8ED8                <1> 		mov  ds, ax
   193 0000E50D 8EC0                <1> 		mov  es, ax
   194 0000E50F E83EFF              <1> 		call    test64kb
   195 0000E512 720D                <1> 		jc	memoryTestEnd
   196 0000E514 E83C00              <1> 		call segmentOK
   197 0000E517 B80000              <1> 		mov	 ax,0x0
   198 0000E51A 8EC0                <1> 		mov  es, ax
   199 0000E51C 26FE060104          <1> 		inc byte es:[flagMemOk]
   200                              <1> 
   201                              <1> memoryTestEnd:
   202 0000E521 1F                  <1> 		pop  	ds
   203 0000E522 B80000              <1> 		mov 	ax, 0x0
   204 0000E525 8EC0                <1> 		mov 	es, ax
   205                              <1> 
   206 0000E527 26A00104            <1> 		mov		al, byte es:[flagMemOk]
   207 0000E52B 3C07                <1> 		cmp		al, 7
   208 0000E52D 7406                <1> 		jz      onlyTotal
   209                              <1> 
   210 0000E52F BB[58E3]            <1> 		mov		bx, blocoNOK
   211 0000E532 E82AFC              <1> 		call	print2
   212                              <1> onlyTotal:		
   213 0000E535 B00D                <1> 		mov		al, 0Dh
   214 0000E537 E81AFC              <1> 		call	printCH
   215 0000E53A BB[6DE3]            <1> 		mov		bx, totalMem
   216 0000E53D E81FFC              <1> 		call	print2
   217 0000E540 B81100              <1> 		mov     ax, 17
   218 0000E543 268A0E0104          <1> 		mov		cl, byte es:[flagMemOk]
   219 0000E548 F6E1                <1> 		mul		cl
   220                              <1> 		;call	print_hex
   221 0000E54A BB[7FE3]            <1> 		mov		bx, qtdMem0
   222                              <1> 		;call	printBX
   223 0000E54D 01C3                <1> 		add		bx, ax
   224                              <1> 		;call	printBX
   225 0000E54F E80DFC              <1> 		call 	print2
   226                              <1> 
   227 0000E552 C3                  <1> 		ret
   228                              <1> 
   229                              <1> segmentOK:
   230 0000E553 B800F0              <1>         mov		ax, 0xF000
   231 0000E556 8ED8                <1>         mov		ds, ax
   232 0000E558 BB[4BE3]            <1>         mov		bx, blocoOK
   233 0000E55B E801FC              <1>         call	print2
   234 0000E55E C3                  <1> 		ret
   235                              <1> 
   236                              <1> ;-------------------------------------------------------------------------
   237                              <1> ;  Low memory error: beep - pause - beep - pause ... - 400 Hz
   238                              <1> beep:
   239                              <1> ;	mov	al,0B6h
   240                              <1> ;	out	pit_ctl_reg,al		; PIT - channel 2 mode 3
   241                              <1> ;	mov	ax,pic_freq/400		; 400 Hz signal
   242                              <1> ;	out	pit_ch2_reg,al
   243                              <1> ;	mov	al,ah
   244                              <1> ;	out	pit_ch2_reg,al
   245                              <1> ;	in	al,ppi_pb_reg
   246                              <1> ;.1:
   247                              <1> ;	or	al,3			; turn speaker on and enable
   248                              <1> ;	out	ppi_pb_reg,al		; PIT channel 2 to speaker
   249                              <1> ;	mov	cx,0
   250                              <1> ;.2:
   251                              <1> ;	nop
   252                              <1> ;	loop	.2
   253                              <1> ;	and	al,0FCh			; turn of speaker
   254                              <1> ;	out	ppi_pb_reg,al
   255                              <1> ;	mov	cx,0
   256                              <1> ;.3:
   257                              <1> ;	nop
   258                              <1> ;	loop	.3
   259                              <1> ;	jmp	.1
   102                                  %include "printRegs.asm"
     1                              <1> 
     2                              <1> 
     3                              <1> 
     4                              <1> 
     5                              <1> printES:
     6 0000E55F 06                  <1>         push ES
     7 0000E560 B045                <1>         mov al, 'E'
     8 0000E562 E8EFFB              <1>         call printCH
     9 0000E565 B053                <1>         mov al, 'S'
    10 0000E567 E8EAFB              <1>         call printCH
    11 0000E56A 8CC0                <1>         mov     AX, ES
    12 0000E56C E83700              <1>         call print_hex
    13 0000E56F 07                  <1>         pop ES
    14 0000E570 C3                  <1>         ret
    15                              <1> 
    16                              <1> printBX:
    17 0000E571 50                  <1> 		push AX
    18 0000E572 06                  <1>         push ES
    19 0000E573 B042                <1>         mov al, 'B'
    20 0000E575 E8DCFB              <1>         call printCH
    21 0000E578 B058                <1>         mov al, 'X'
    22 0000E57A E8D7FB              <1>         call printCH
    23 0000E57D B03A                <1>         mov al, ':'
    24 0000E57F E8D2FB              <1>         call printCH
    25 0000E582 89D8                <1>         mov     AX, BX
    26 0000E584 E81F00              <1>         call print_hex
    27 0000E587 B00D                <1> 		mov  al, 0Dh
    28 0000E589 E8C8FB              <1> 		call printCH
    29 0000E58C B00A                <1> 		mov  al, 0Ah
    30 0000E58E E8C3FB              <1> 		call printCH
    31 0000E591 07                  <1>         pop ES
    32 0000E592 58                  <1> 		pop AX
    33 0000E593 C3                  <1>         ret
    34                              <1> 
    35                              <1> ;=========================================================================
    36                              <1> ; print_digit - print hexadecimal digit
    37                              <1> ; Input:
    38                              <1> ;	AL - bits 3...0 - digit to print (0...F)
    39                              <1> ; Output:
    40                              <1> ;	none
    41                              <1> ;-------------------------------------------------------------------------
    42                              <1> print_digit:
    43 0000E594 50                  <1> 	push	ax
    44 0000E595 53                  <1> 	push	bx
    45 0000E596 240F                <1> 	and	al,0Fh
    46 0000E598 0430                <1> 	add	al,'0'			; convert to ASCII
    47 0000E59A 3C39                <1> 	cmp	al,'9'			; less or equal 9?
    48 0000E59C 7602                <1> 	jna	.1
    49 0000E59E 0407                <1> 	add	al,'A'-'9'-1		; a hex digit
    50                              <1> .1:
    51 0000E5A0 E8B1FB              <1>         call    printCH
    52 0000E5A3 5B                  <1> 	pop	bx
    53 0000E5A4 58                  <1> 	pop	ax
    54 0000E5A5 C3                  <1> 	ret
    55                              <1> 
    56                              <1> ;=========================================================================
    57                              <1> ; print_hex - print 16-bit number in hexadecimal
    58                              <1> ; Input:
    59                              <1> ;	AX - number to print
    60                              <1> ; Output:
    61                              <1> ;	none
    62                              <1> ;-------------------------------------------------------------------------
    63                              <1> print_hex:
    64 0000E5A6 86C4                <1> 	xchg	al,ah
    65 0000E5A8 E80600              <1> 	call	print_byte		; print the upper byte
    66 0000E5AB 86C4                <1> 	xchg	al,ah
    67 0000E5AD E80100              <1> 	call	print_byte		; print the lower byte
    68 0000E5B0 C3                  <1> 	ret
    69                              <1> ;=========================================================================
    70                              <1> ; print_byte - print a byte in hexadecimal
    71                              <1> ; Input:
    72                              <1> ;	AL - byte to print
    73                              <1> ; Output:
    74                              <1> ;	none
    75                              <1> ;-------------------------------------------------------------------------
    76                              <1> print_byte:
    77 0000E5B1 D0C0                <1> 	rol	al,1
    78 0000E5B3 D0C0                <1> 	rol	al,1
    79 0000E5B5 D0C0                <1> 	rol	al,1
    80 0000E5B7 D0C0                <1> 	rol	al,1
    81 0000E5B9 E8D8FF              <1> 	call	print_digit
    82 0000E5BC D0C0                <1> 	rol	al,1
    83 0000E5BE D0C0                <1> 	rol	al,1
    84 0000E5C0 D0C0                <1> 	rol	al,1
    85 0000E5C2 D0C0                <1> 	rol	al,1
    86 0000E5C4 E8CDFF              <1> 	call	print_digit
    87 0000E5C7 C3                  <1> 	ret
    88                              <1> 
    89                              <1> 
    90                              <1> 
    91                              <1> ;byte_to_hex_str
    92                              <1> ;This function return in AX the ascii code for hexadecimal number from 0 to F
    93                              <1> ;Parameters:
    94                              <1> ;               AL = imput
    95                              <1> ;               AX = output
    96                              <1> ;Changes CL
    97                              <1> byte_to_hex_str:
    98 0000E5C8 51                  <1>         PUSH CX
    99 0000E5C9 88C4                <1>         mov ah, al
   100 0000E5CB B104                <1>         mov cl, 4
   101 0000E5CD D2E8                <1>         shr al, cl
   102 0000E5CF 250F0F              <1>         and ax, 0x0f0f
   103 0000E5D2 3C09                <1>         cmp al, 0x09
   104 0000E5D4 7602                <1>         jbe .11
   105 0000E5D6 0407                <1>         add al, 'A' - '0' - 10
   106                              <1> .11:
   107 0000E5D8 80FC09              <1>         cmp ah, 0x09
   108 0000E5DB 7603                <1>         jbe .22
   109 0000E5DD 80C407              <1>         add ah, 'A' - '0' - 10
   110                              <1> .22:
   111 0000E5E0 053030              <1>         add ax, "00"
   112                              <1> .ret:
   113 0000E5E3 59                  <1>         POP CX
   114 0000E5E4 C3                  <1>         ret
   115                              <1> 
   116                              <1> 
   103                                  
   104 0000E5E5 FF<rep 1A0Bh>                   setloc	0FFF0h			; Power-On Entry Point, macro fills space from last line with FF
   104          ******************       warning: Inserting 6667 bytes [-w+user]
   105                                  start:
   106 0000FFF0 EA[00E0]00F0                    jmp     0F000h:reset
   107 0000FFF5 FF<rep Ah>                      setloc	0FFFFh			; Pad remainder of ROM
   107          ******************       warning: Inserting 10 bytes [-w+user]
   108 0000FFFF FF                      	      db	0ffh            
