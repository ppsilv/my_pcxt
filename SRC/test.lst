     1                                  cpu	8086
     2                                  
     3                                  %include "macro.inc"
     1                              <1> ;=========================================================================
     2                              <1> ; macro.inc - Defines macros
     3                              <1> ;       setloc
     4                              <1> ;-------------------------------------------------------------------------
     5                              <1> ;
     6                              <1> ; Compiles with NASM 2.07, might work with other versions
     7                              <1> ;
     8                              <1> ; Copyright (C) 2011 - 2012 Sergey Kiselev.
     9                              <1> ; Provided for hobbyist use on the Xi 8088 board.
    10                              <1> ;
    11                              <1> ; This program is free software: you can redistribute it and/or modify
    12                              <1> ; it under the terms of the GNU General Public License as published by
    13                              <1> ; the Free Software Foundation, either version 3 of the License, or
    14                              <1> ; (at your option) any later version.
    15                              <1> ;
    16                              <1> ; This program is distributed in the hope that it will be useful,
    17                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
    18                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    19                              <1> ; GNU General Public License for more details.
    20                              <1> ;
    21                              <1> ; You should have received a copy of the GNU General Public License
    22                              <1> ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
    23                              <1> ;
    24                              <1> ;=========================================================================
    25                              <1> 
    26                              <1> ;=========================================================================
    27                              <1> ; setloc - Set location. Insert 0FFh bytes until specifed location is reached.
    28                              <1> ;-------------------------------------------------------------------------
    29                              <1> %imacro setloc  1.nolist
    30                              <1> %assign pad_bytes (%1-($-$$)-START)
    31                              <1> %if pad_bytes < 0
    32                              <1> %assign over_bytes -pad_bytes
    33                              <1> %error Preceding code extends beyond setloc location by over_bytes bytes
    34                              <1> %endif
    35                              <1> %if pad_bytes > 0
    36                              <1> %warning Inserting pad_bytes bytes
    37                              <1>  times  pad_bytes db 0FFh
    38                              <1> %endif
    39                              <1> %endm
     4                                  
     5                                  %define	START		0x0000		
     6                                  %define DATE		'22/11/24'
     7                                  %define MODEL_BYTE	0FEh		; IBM PC/XT
     8                                  %define VERSION		'1.0.00'	; BIOS version
     9                                  
    10                                  org	START		
    11                                  
    12                                  
    13 00000000 585420383038382042-     welcome		db	"XT 8088 BIOS, Version "
    13 00000009 494F532C2056657273-
    13 00000012 696F6E20           
    14 00000016 312E302E3030            		db	VERSION
    15 0000001C 2E200D                  		db	". ", 0Dh
    16 0000001F 5061756C6F2053696C-     		db	"Paulo Silva(pgordao) - Copyright (C) 2024", 0Dh
    16 00000028 76612870676F726461-
    16 00000031 6F29202D20436F7079-
    16 0000003A 726967687420284329-
    16 00000043 20323032340D       
    17 00000049 43505520383038382D-     		db	"CPU 8088-2   board: 8088BOAD2447-RA  ", 0Dh
    17 00000052 32202020626F617264-
    17 0000005B 3A2038303838424F41-
    17 00000064 44323434372D524120-
    17 0000006D 200D               
    18 0000006F 38303838204D6F6E69-     		db	"8088 MonitorV0 V ",VERSION ," 2447A 512 Sram Rom at29C512", 0Dh
    18 00000078 746F72563020562031-
    18 00000081 2E302E303020323434-
    18 0000008A 374120353132205372-
    18 00000093 616D20526F6D206174-
    18 0000009C 3239433531320D     
    19 000000A3 0D4120746F74616C20-                     db      0dh,"A total of 64k minimum are ok..", 0Dh, 0
    19 000000AC 6F662036346B206D69-
    19 000000B5 6E696D756D20617265-
    19 000000BE 206F6B2E2E0D00     
    20                                  
    21 000000C5 54657374696E67206D-     testMem:        db      "Testing memory:",0Dh , 0
    21 000000CE 656D6F72793A0D00   
    22 000000D6 313030303020746F20-     bloco01:        db      "10000 to 1FFFF", 0     ;128k
    22 000000DF 314646464600       
    23 000000E5 323030303020746F20-     bloco02:        db      "20000 to 2FFFF", 0     ;192k
    23 000000EE 324646464600       
    24 000000F4 333030303020746F20-     bloco03:        db      "30000 to 3FFFF", 0     ;256k
    24 000000FD 334646464600       
    25 00000103 343030303020746F20-     bloco04:        db      "40000 to 4FFFF", 0     ;320k
    25 0000010C 344646464600       
    26 00000112 353030303020746F20-     bloco05:        db      "50000 to 5FFFF", 0     ;384k
    26 0000011B 354646464600       
    27 00000121 363030303020746F20-     bloco06:        db      "60000 to 6FFFF", 0     ;448k
    27 0000012A 364646464600       
    28 00000130 373030303020746F20-     bloco07:        db      "70000 to 7FFFF", 0     ;512k
    28 00000139 374646464600       
    29 0000013F 207365676D656E7420-     blocoOK:        db      " segment OK", 0Dh, 0
    29 00000148 4F4B0D00           
    30 0000014C 546F74616C206F6620-     totalMem:       db      "Total of memory: ",0
    30 00000155 6D656D6F72793A2000 
    31 0000015E 3133312E303732204B-     qtdMem1:         db      "131.072 KBytes.", 0Dh, 0
    31 00000167 42797465732E0D00   
    32 0000016F 3139362E363038204B-     qtdMem2:         db      "196.608 KBytes.", 0Dh, 0
    32 00000178 42797465732E0D00   
    33 00000180 3236322E313434204B-     qtdMem3:         db      "262.144 KBytes.", 0Dh, 0
    33 00000189 42797465732E0D00   
    34 00000191 3332372E363830204B-     qtdMem4:         db      "327.680 KBytes.", 0Dh, 0
    34 0000019A 42797465732E0D00   
    35 000001A2 3339332E323136204B-     qtdMem5:         db      "393.216 KBytes.", 0Dh, 0
    35 000001AB 42797465732E0D00   
    36 000001B3 3435382E373532204B-     qtdMem6:         db      "458.752 KBytes.", 0Dh, 0
    36 000001BC 42797465732E0D00   
    37 000001C4 3532342E323838204B-     qtdMem7:         db      "524.288 KBytes.", 0Dh, 0
    37 000001CD 42797465732E0D00   
    38                                  
    39                                  
    40 000001D5 FF<rep DE2Bh>           setloc	0E000h
    40          ******************       warning: Inserting 56875 bytes [-w+user]
    41                                  reset:
    42 0000E000 FA                                      cli
    43 0000E001 B84000                      		mov ax,0x40
    44 0000E004 8ED8                        		mov ds,ax
    45 0000E006 C70672000000            		mov word [0x72],0x0
    46 0000E00C 31C0                        		xor ax,ax
    47 0000E00E 7248                        		jc l0xb3
    48 0000E010 7046                        		jo l0xb3
    49 0000E012 7844                        		js l0xb3
    50 0000E014 7542                        		jnz l0xb3
    51 0000E016 7B40                        		jpo l0xb3
    52 0000E018 83C001                      		add ax,0x1
    53 0000E01B 743B                        		jz l0xb3
    54 0000E01D 7A39                        		jpe l0xb3
    55 0000E01F 2D0280                      		sub ax,0x8002
    56 0000E022 7834                        		js l0xb3
    57 0000E024 40                          		inc ax
    58 0000E025 7131                        		jno l0xb3
    59 0000E027 D1E0                        		shl ax,1
    60 0000E029 732D                        		jnc l0xb3
    61 0000E02B 752B                        		jnz l0xb3
    62 0000E02D D1E0                        		shl ax,1
    63 0000E02F 7227                        		jc l0xb3   
    64 0000E031 BB5555                      		mov bx,0x5555
    65 0000E034 89DD                    l0x8f:    	mov bp,bx
    66 0000E036 89E9                        		mov cx,bp
    67 0000E038 89CC                        		mov sp,cx
    68 0000E03A 89E2                        		mov dx,sp
    69 0000E03C 8ED2                        		mov ss,dx
    70 0000E03E 8CD6                        		mov si,ss
    71 0000E040 8EC6                        		mov es,si
    72 0000E042 8CC7                        		mov di,es
    73 0000E044 8EDF                        		mov ds,di
    74 0000E046 8CD8                        		mov ax,ds
    75 0000E048 3D5555                      		cmp ax,0x5555
    76 0000E04B 7506                        		jnz l0xae
    77 0000E04D F7D0                        		not ax
    78 0000E04F 89C3                        		mov bx,ax
    79 0000E051 EBE1                        		jmp short l0x8f
    80 0000E053 35AAAA                  l0xae: 		xor ax,0xaaaa
    81 0000E056 7403                        		jz l0xb4
    82 0000E058 E93C02                  l0xb3: 		jmp led3blinks
    83 0000E05B FC                      l0xb4: 		cld                     
    84                                                  ;Verify if the board has at least 32kbytes of RAM
    85 0000E05C E98802                                  jmp testFirst64kb
    86                                  
    87                                  initBios:
    88 0000E05F B80000                          mov ax, 0x0000
    89 0000E062 8EC0                            mov es, ax
    90 0000E064 8ED0                            mov ss, ax                  ; Segmento Stack
    91 0000E066 B800F0                          mov ax, 0xF000
    92 0000E069 8ED8                            mov ds, ax
    93 0000E06B 8EC8                    	mov cs, ax
    94                                          ;Put 0x8000 in stack pointer top of the first 32kbytes of mem
    95 0000E06D 31E4                            xor sp, sp          ;The minimum of 64k of ram are OK.
    96 0000E06F 31C0                            xor ax, ax              ; Put flags in known state
    97 0000E071 50                              PUSH AX
    98 0000E072 9D                              POPF
    99 0000E073 89C4                            MOV SP,AX    
   100                                  
   101                                     
   102                                  ;******************************************************
   103                                  ; END INITIALIZATION
   104                                  ;======================================================
   105                                  ;PUT MAIN CODE HERE
   106 0000E075 E84800                  		call configure_uart
   107                                  		
   108 0000E078 E83901                  		call scr_clear
   109 0000E07B BB[0000]                		mov  bx, welcome
   110 0000E07E E8FC00                  		call print2
   111 0000E081 BB[C500]                		mov  bx, testMem
   112 0000E084 E8F600                  		call print2
   113 0000E087 BB[D600]                		mov  bx, bloco01
   114 0000E08A E8F000                  		call print2
   115 0000E08D B80010                  		mov  ax, 0x1000
   116 0000E090 8ED8                    		mov  ds, ax
   117 0000E092 8EC0                    		mov  es, ax
   118 0000E094 E89902                  		call    test64kb
   119 0000E097 B800F0                  		mov ax, 0xF000
   120 0000E09A 8ED8                    		mov ds, ax
   121 0000E09C BB[5E01]                		mov  bx, qtdMem1
   122 0000E09F E8DB00                  		call print2
   123 0000E0A2 E9B401                  		jmp ledblinkOk
   124                                  
   125                                  %include "DRV16C550_8088.asm"
     1                              <1>         CPU 8086
     2                              <1>    
     3                              <1> 
     4                              <1> ; Port
     5 0000E0A5 F803                <1> COM1:	DW		0x3F8
     6                              <1> ; Here are the port numbers for various UART registers:
     7                              <1> uart_tx_rx 		EQU  0x3f8 ; 0 DLAB = 0 for Regs. TX and RX
     8                              <1> uart_DLL 		EQU  0x3f8 ; 0 DLAB = 1 Divisor lacth low
     9                              <1> uart_IER 		EQU  0x3f9 ; 1 DLAB = 0 Interrupt Enable Register
    10                              <1> uart_DLH 		EQU  0x3f9 ; 1 DLAB = 1 Divisor lacth high
    11                              <1> uart_ISR 		EQU  0x3fa ; 2 IIR Interrupt Ident. Register READ ONLY
    12                              <1> uart_FCR 		EQU  0x3fa ; 2 Fifo Control Resgister WRITE ONLY
    13                              <1> uart_LCR 		EQU  0x3fb ; 3 Line Control Register
    14                              <1> uart_MCR 		EQU  0x3fc ; 4 Modem Control Register
    15                              <1> uart_LSR 		EQU  0x3fd ; 5 Line Status Register
    16                              <1> uart_MSR 		EQU  0x3fe ; 6 Modem Status Register
    17                              <1> uart_scratch 	EQU  0x3ff ; 7 SCR Scratch Register
    18                              <1> 
    19                              <1> UART_FREQUENCY		equ 4915000
    20                              <1> ;Fomula UART_FREQUENCY/(  9600 * 16)
    21                              <1> ;Baudrates
    22                              <1> UART_BAUD_9600		EQU 32
    23                              <1> UART_BAUD_19200		EQU 16
    24                              <1> UART_BAUD_38400		EQU  8
    25                              <1> UART_BAUD_56800		EQU  5
    26                              <1> UART_BAUD_115200	EQU  3
    27                              <1> UART_BAUD_230400	EQU  1
    28                              <1> 
    29                              <1> UART_TX_WAIT		EQU	0x7fff		; Count before a TX times out
    30                              <1> 
    31 0000E0A7 53657269616C206472- <1> msg0_01:   db "Serial driver for 16C550",0
    31 0000E0B0 6976657220666F7220- <1>
    31 0000E0B9 31364335353000      <1>
    32                              <1> ;configure_uart
    33                              <1> ;Parameters:None
    34                              <1> ;			
    35                              <1> ;			
    36                              <1> configure_uart:
    37 0000E0C0 B9FF1F              <1> 			mov cx, 0x1fff
    38 0000E0C3 E8DE00              <1> 			call	basicDelay
    39 0000E0C6 B000                <1> 			MOV		AL,0x0	 		;
    40 0000E0C8 BAF903              <1> 			MOV		DX, uart_IER
    41 0000E0CB EE                  <1> 			OUT  	DX,	AL	; Disable interrupts
    42                              <1> 
    43 0000E0CC B91F00              <1> 			mov cx, 0x1f
    44 0000E0CF E8D200              <1> 			call	basicDelay
    45                              <1> 
    46 0000E0D2 B080                <1> 			MOV		AL, 0x80			;
    47 0000E0D4 BAFB03              <1> 			MOV		DX, uart_LCR
    48 0000E0D7 EE                  <1> 			OUT     DX,	AL 	; Turn DLAB on
    49 0000E0D8 B91F00              <1> 			mov cx, 0x1f
    50 0000E0DB E8C600              <1> 			call	basicDelay
    51                              <1> 
    52 0000E0DE B008                <1> 			MOV		AL, UART_BAUD_38400 ;0x08
    53 0000E0E0 BAF803              <1> 			MOV		DX, uart_DLL
    54 0000E0E3 EE                  <1> 			OUT     DX,   AL	; Set divisor low
    55 0000E0E4 B91F00              <1> 			mov cx, 0x1f
    56 0000E0E7 E8BA00              <1> 			call	basicDelay
    57                              <1> 
    58 0000E0EA B000                <1> 			MOV		AL, 0x00		;
    59 0000E0EC BAF903              <1> 			MOV		DX, uart_DLH
    60 0000E0EF EE                  <1> 			OUT     DX,	AL	; Set divisor high
    61 0000E0F0 B91F00              <1> 			mov cx, 0x1f
    62 0000E0F3 E8AE00              <1> 			call	basicDelay
    63                              <1> 
    64 0000E0F6 B003                <1> 			MOV     AL, 0x03	; AH	
    65 0000E0F8 BAFB03              <1> 			MOV		DX, uart_LCR
    66 0000E0FB EE                  <1> 			OUT     DX,	AL	; Write out flow control bits 8,1,N
    67 0000E0FC B91F00              <1> 			mov cx, 0x1f
    68 0000E0FF E8A200              <1> 			call	basicDelay
    69                              <1> 
    70 0000E102 B081                <1> 			MOV 	AL,0x81			;
    71 0000E104 BAFA03              <1> 			MOV		DX, uart_ISR
    72 0000E107 EE                  <1> 			OUT     DX,	AL	; Turn on FIFO, with trigger level of 8.
    73                              <1> 								                ; This turn on the 16bytes buffer!
    74 0000E108 C3                  <1> 			RET
    75                              <1> ;UART_RX:
    76                              <1> ;Parameters: 
    77                              <1> ;			AL = return the available character
    78                              <1> ;			If al returns with a valid char flag carry is set, otherwise
    79                              <1> ;			flag carry is clear
    80                              <1> UART_RX:	
    81 0000E109 BAFD03              <1> 			MOV DX, uart_LSR
    82 0000E10C EC                  <1> 			IN	AL, DX	 		; Get the line status register
    83 0000E10D 2401                <1> 			AND AL, 0x01		; Check for characters in buffer
    84 0000E10F F8                  <1> 			CLC 				; Clear carry
    85 0000E110 7405                <1> 			JZ	END				; Just ret (with carry clear) if no characters
    86 0000E112 BAF803              <1> 			MOV DX, uart_tx_rx
    87 0000E115 EC                  <1> 			IN	AL, DX			; Read the character from the UART receive buffer
    88 0000E116 F9                  <1> 			STC 				; Set the carry flag
    89                              <1> END:			
    90 0000E117 C3                  <1> 			RET
    91                              <1> 
    92                              <1> UART_RX_blct:	
    93 0000E118 BAFD03              <1> 			MOV DX, uart_LSR
    94 0000E11B EC                  <1> 			IN	AL, DX	 		; Get the line status register
    95 0000E11C 2401                <1> 			AND AL, 0x01		; Check for characters in buffer
    96 0000E11E 74F8                <1> 			JZ	UART_RX_blct	; Just loopif no characters
    97 0000E120 BAF803              <1> 			MOV DX, uart_tx_rx
    98 0000E123 EC                  <1> 			IN	AL, DX			; Read the character from the UART receive buffer
    99 0000E124 C3                  <1> 			RET
   100                              <1> 
   101                              <1> 
   102                              <1> printch:
   103                              <1> UART_TX:	
   104 0000E125 52                  <1> 			PUSH DX
   105 0000E126 51                  <1> 			PUSH CX 	
   106 0000E127 53                  <1> 			PUSH BX
   107 0000E128 50                  <1> 			PUSH AX
   108 0000E129 BBFF7F              <1> 			MOV BX, UART_TX_WAIT	; Set CB to the transmit timeout
   109                              <1> LOOP_UART_TX:
   110 0000E12C BAFD03              <1> 			MOV DX, uart_LSR
   111 0000E12F EC                  <1> 			IN	AL,	DX 				; Get the line status register
   112 0000E130 2460                <1> 			AND AL, 0x60			; Check for TX empty
   113 0000E132 750D                <1> 			JNZ	OUT_UART_TX			; If set, then TX is empty, goto transmit
   114 0000E134 B9FF17              <1> 			mov	cx, 0x17ff
   115 0000E137 E86A00              <1> 			call basicDelay
   116 0000E13A 4B                  <1> 			DEC	BX
   117 0000E13B 75EF                <1> 			JNZ LOOP_UART_TX		; Otherwise loop
   118 0000E13D 58                  <1> 			POP	AX					; We've timed out at this point so
   119 0000E13E F8                  <1> 			CLC						; Clear the carry flag and preserve AX
   120 0000E13F EB10                <1> 			JMP FIM_UART_TX
   121                              <1> OUT_UART_TX:
   122 0000E141 58                  <1> 			POP	AX					; Good to send at this point, so	
   123 0000E142 3C0D                <1> 			CMP AL, 0x0D
   124 0000E144 740F                <1> 			JZ  println
   125 0000E146 BAF803              <1> 			MOV	DX, uart_tx_rx
   126 0000E149 EE                  <1> 			OUT	DX, AL		; Write the character to the UART transmit buffer
   127 0000E14A B9FF02              <1> 			mov	cx, 0x2ff
   128 0000E14D E85400              <1> 			call basicDelay
   129 0000E150 F9                  <1> 			STC						; Set carry flag
   130                              <1> FIM_UART_TX:
   131 0000E151 5B                  <1> 			POP BX
   132 0000E152 59                  <1> 			POP CX
   133 0000E153 5A                  <1> 			POP DX
   134 0000E154 C3                  <1> 			RET
   135                              <1> println:
   136 0000E155 E80300              <1> 			call printlf
   137 0000E158 F9                  <1> 			STC						; Set carry flag
   138 0000E159 EBF6                <1> 			JMP FIM_UART_TX
   139                              <1> 
   140                              <1> printlf:
   141 0000E15B BAF803              <1> 			MOV	DX, uart_tx_rx
   142 0000E15E EE                  <1> 			OUT	DX, AL		; Send 0x0D
   143 0000E15F B9FF00              <1> 			mov	cx, 0xff
   144 0000E162 E83F00              <1> 			call basicDelay
   145 0000E165 B00A                <1> 			MOV AL, 0x0A	; Send 0x0A
   146 0000E167 BAF803              <1> 			MOV	DX, uart_tx_rx
   147 0000E16A EE                  <1> 			OUT	DX, AL		; Write the character to the UART transmit buffer
   148 0000E16B B9FF00              <1> 			mov	CX, 0xff
   149 0000E16E E83300              <1> 			call basicDelay
   150 0000E171 C3                  <1> 			ret
   151                              <1> ;printCH
   152                              <1> ;parameters:
   153                              <1> ;          bx = message address
   154                              <1> ;
   155                              <1> printCH:
   156 0000E172 BAF803              <1> 	MOV	DX, uart_tx_rx
   157 0000E175 EE                  <1>    	OUT	DX, AL
   158 0000E176 B9FF00              <1> 	mov	CX, 0xff
   159                              <1> .basicDelay:	
   160 0000E179 49                  <1>     dec cx
   161 0000E17A 75FD                <1>     jnz .basicDelay
   162 0000E17C C3                  <1> 	ret
   163                              <1> 
   164                              <1> 
   165                              <1> ;;print2
   166                              <1> print2:
   167 0000E17D 3E8A07              <1>         	mov  al,byte ds:[bx]
   168 0000E180 3C00                <1>         	cmp  al,0h
   169 0000E182 7408                <1>         	jz   .fimPrint
   170                              <1> .cont:
   171 0000E184 E89EFF              <1> 			call UART_TX
   172 0000E187 73FB                <1> 			JNC	.cont
   173                              <1> 
   174 0000E189 43                  <1>         	inc  bx
   175 0000E18A EBF1                <1>         	jmp  print2
   176 0000E18C C3                  <1> .fimPrint:   ret		
   177                              <1> 
   178                              <1> 
   179                              <1> print3:
   180 0000E18D 1E                  <1> 			push DS
   181 0000E18E B800F0              <1> 			mov  AX, 0xF000
   182 0000E191 8ED8                <1> 			mov  DS, AX
   183 0000E193 3E8A07              <1>         	mov  al, byte ds:[bx]
   184 0000E196 3C00                <1>         	cmp  al, 0h
   185 0000E198 7409                <1>         	jz   .fimPrint3
   186                              <1> .cont3:
   187 0000E19A E888FF              <1> 			call UART_TX
   188 0000E19D 73FB                <1> 			JNC	 .cont3
   189                              <1> 
   190 0000E19F 43                  <1>         	inc  bx
   191 0000E1A0 EBEB                <1>         	jmp  print3
   192 0000E1A2 1F                  <1> 			pop  DS
   193 0000E1A3 C3                  <1> .fimPrint3:   ret		
   194                              <1> 
   195                              <1> 
   196                              <1> ;print3:
   197                              <1> ;        	mov  al,byte ds:[bx]
   198                              <1> ;        	cmp  al,0h
   199                              <1> ;        	jz   fimPrint3
   200                              <1> ;
   201                              <1> ;			MOV	DX, uart_tx_rx
   202                              <1> ;			OUT	DX, AL		; Write the character to the UART transmit buffer
   203                              <1> ;			mov	cx, 0xff
   204                              <1> ;			call basicDelay
   205                              <1> ;
   206                              <1> ;        	inc  bx
   207                              <1> ;        	jmp  print2
   208                              <1> ;fimPrint3:   ret		
   209                              <1> 
   210                              <1> 	
   211                              <1> basicDelay:
   212 0000E1A4 49                  <1>         dec cx
   213 0000E1A5 75FD                <1>         jnz basicDelay
   214 0000E1A7 C3                  <1>         ret
   126                                  %include "screen.asm"
     1                              <1> 
     2 0000E1A8 1B5B324A00          <1> cls     db 0x1B,"[2J",0
     3 0000E1AD 1B5B213B214800      <1> curpos  db 0x1B,"[!;!H",0
     4                              <1> 
     5                              <1> ;=====================
     6                              <1> ; ESC [ 2 J
     7                              <1> ;
     8                              <1> scr_clear:
     9 0000E1B4 BB[A8E1]            <1>         mov	bx, cls
    10 0000E1B7 E8C3FF              <1>         call print2	
    11 0000E1BA C3                  <1>         ret
    12                              <1> ;=====================
    13                              <1> ; ESC [ Pl ; Pc H
    14                              <1> ; input:
    15                              <1> ;	dh = y position
    16                              <1> ; 	dl = x position
    17                              <1> ; MARK: scr_goto
    18                              <1> scr_goto:
    19 0000E1BB 1E                  <1>         push DS
    20 0000E1BC B80000              <1>         mov AX, 0x0
    21 0000E1BF 8ED8                <1>         mov DS, AX
    22 0000E1C1 89C3                <1>         mov bx, AX
    23 0000E1C3 3EC6071B            <1>         mov byte ds:[bx],0x1B
    24 0000E1C7 43                  <1>         inc bx
    25 0000E1C8 3EC6075B            <1>         mov byte ds:[bx],'['
    26 0000E1CC 43                  <1>         inc bx
    27 0000E1CD 3EC6070A            <1>         mov byte ds:[bx],10
    28 0000E1D1 43                  <1>         inc bx
    29 0000E1D2 3EC6073B            <1>         mov byte ds:[bx],';'
    30 0000E1D6 43                  <1>         inc bx
    31 0000E1D7 3EC6070A            <1>         mov byte ds:[bx],10
    32 0000E1DB 43                  <1>         inc bx
    33 0000E1DC 3EC60748            <1>         mov byte ds:[bx],'H'  
    34 0000E1E0 43                  <1>         inc bx
    35 0000E1E1 3EC60700            <1>         mov byte ds:[bx],0x0
    36                              <1> 
    37                              <1> 
    38 0000E1E5 B80000              <1>         mov AX, 0x0
    39 0000E1E8 89C3                <1>         mov bx, AX
    40 0000E1EA E890FF              <1>         call print2
    41 0000E1ED 1F                  <1>         POP DS
    42 0000E1EE C3                  <1> 		ret
    43                              <1> 
    44 0000E1EF 666E30300D00        <1> s123 db "fn00",0dh,0
    45 0000E1F5 666E30310D00        <1> s124 db "fn01",0dh,0
    46 0000E1FB 666E30320D00        <1> s125 db "fn02",0dh,0
    47 0000E201 666E30330D00        <1> s126 db "fn03",0dh,0
    48 0000E207 666E30340D00        <1> s127 db "fn04",0dh,0
    49 0000E20D 666E30350D00        <1> s128 db "fn05",0dh,0
    50                              <1> 
    51                              <1> TESTE:
    52 0000E213 E80FFF              <1>         call printch
    53                              <1> 
    54 0000E216 3C30                <1>         cmp   al, '0'
    55 0000E218 7415                <1>         jz    .fn00
    56 0000E21A 3C31                <1>         cmp   al, '1'
    57 0000E21C 7418                <1>         jz    .fn01
    58 0000E21E 3C32                <1>         cmp   al, '2'
    59 0000E220 741B                <1>         jz    .fn02
    60 0000E222 3C33                <1>         cmp   al, '3'
    61 0000E224 741E                <1>         jz    .fn03
    62 0000E226 3C34                <1>         cmp   al, '4'
    63 0000E228 7421                <1>         jz    .fn04
    64 0000E22A 3C35                <1>         cmp   al, '5'
    65 0000E22C 7424                <1>         jz    .fn05
    66 0000E22E C3                  <1>         ret        
    67                              <1> 
    68                              <1> .fn00: 
    69 0000E22F BB[EFE1]            <1>         mov  bx, s123
    70 0000E232 E848FF              <1>         call print2
    71 0000E235 C3                  <1>         ret
    72                              <1> .fn01: 
    73 0000E236 BB[F5E1]            <1>         mov  bx, s124
    74 0000E239 E841FF              <1>         call print2
    75 0000E23C C3                  <1>         ret        
    76                              <1> .fn02: 
    77 0000E23D BB[FBE1]            <1>         mov  bx, s125
    78 0000E240 E83AFF              <1>         call print2
    79 0000E243 C3                  <1>         ret
    80                              <1> .fn03: 
    81 0000E244 BB[01E2]            <1>         mov  bx, s126
    82 0000E247 E833FF              <1>         call print2
    83 0000E24A C3                  <1>         ret
    84                              <1> .fn04:   
    85 0000E24B BB[07E2]            <1>         mov  bx, s127
    86 0000E24E E82CFF              <1>         call print2
    87 0000E251 C3                  <1>         ret
    88                              <1> .fn05: 
    89 0000E252 BB[0DE2]            <1>         mov  bx, s128
    90 0000E255 E825FF              <1>         call print2
    91 0000E258 C3                  <1>         ret
    92                              <1> 
    93                              <1>         
    94                              <1> 
    95                              <1> 
   127                                  %include "errorLed.asm"
     1                              <1> 
     2                              <1> ledblinkOk:
     3                              <1> .loop0:
     4                              <1>           
     5 0000E259 B001                <1>                 mov     al, 0x01
     6 0000E25B E680                <1>                 out     0x80, al
     7 0000E25D B9FF3F              <1>                 mov     cx, 0x3fff
     8                              <1> .label01:
     9 0000E260 49                  <1>                 dec     cx
    10 0000E261 75FD                <1>                 jnz     .label01
    11 0000E263 B000                <1>                 mov     al, 0x00
    12 0000E265 E680                <1>                 out     0x80, al
    13 0000E267 B9FF7F              <1>                 mov     cx, 0x7fff
    14                              <1> .label02:
    15 0000E26A 49                  <1>                 dec     cx
    16 0000E26B 75FD                <1>                 jnz     .label02
    17                              <1> 
    18 0000E26D EBEA                <1>                 jmp     .loop0         
    19                              <1> 
    20                              <1> led2blinks:
    21                              <1> .loop0:
    22 0000E26F BB0300              <1>                 mov     bx, 3
    23                              <1> .loop:            
    24 0000E272 B001                <1>                 mov     al, 0x01
    25 0000E274 E680                <1>                 out     0x80, al
    26 0000E276 B9FFFF              <1>                 mov     cx, 0xffff
    27                              <1> .label01:
    28 0000E279 49                  <1>                 dec     cx
    29 0000E27A 75FD                <1>                 jnz     .label01
    30 0000E27C B000                <1>                 mov     al, 0x00
    31 0000E27E E680                <1>                 out     0x80, al
    32 0000E280 B9FFFF              <1>                 mov     cx, 0xffff
    33                              <1> .label02:
    34 0000E283 49                  <1>                 dec     cx
    35 0000E284 75FD                <1>                 jnz     .label02
    36                              <1> 
    37 0000E286 4B                  <1>                 dec     bx
    38 0000E287 75E9                <1>                 jnz     .loop
    39                              <1> ;                mov     al, 0x01
    40                              <1> ;                out     0x80, al
    41                              <1>                 
    42 0000E289 BB0500              <1>                 mov     bx, 5
    43                              <1> .longDelay:                
    44 0000E28C B9FFFF              <1>                 mov     cx, 0xffff
    45                              <1> .labelLD:
    46 0000E28F 49                  <1>                 dec     cx
    47 0000E290 75FD                <1>                 jnz     .labelLD
    48 0000E292 4B                  <1>                 dec     bx
    49 0000E293 75F7                <1>                 jnz     .longDelay
    50                              <1>                 ;mov     bx, 3 
    51 0000E295 EBD8                <1>                 jmp     .loop0         
    52                              <1> 
    53                              <1> led3blinks:
    54                              <1> .loop0:
    55 0000E297 BB0300              <1>                 mov     bx, 3
    56                              <1> .loop:            
    57 0000E29A B001                <1>                 mov     al, 0x01
    58 0000E29C E680                <1>                 out     0x80, al
    59 0000E29E B9FFFF              <1>                 mov     cx, 0xffff
    60                              <1> .label01:
    61 0000E2A1 49                  <1>                 dec     cx
    62 0000E2A2 75FD                <1>                 jnz     .label01
    63 0000E2A4 B000                <1>                 mov     al, 0x00
    64 0000E2A6 E680                <1>                 out     0x80, al
    65 0000E2A8 B9FFFF              <1>                 mov     cx, 0xffff
    66                              <1> .label02:
    67 0000E2AB 49                  <1>                 dec     cx
    68 0000E2AC 75FD                <1>                 jnz     .label02
    69                              <1> 
    70 0000E2AE 4B                  <1>                 dec     bx
    71 0000E2AF 75E9                <1>                 jnz     .loop
    72                              <1> ;                mov     al, 0x01
    73                              <1> ;                out     0x80, al
    74                              <1>                 
    75 0000E2B1 BB0500              <1>                 mov     bx, 5
    76                              <1> .longDelay:                
    77 0000E2B4 B9FFFF              <1>                 mov     cx, 0xffff
    78                              <1> .labelLD:
    79 0000E2B7 49                  <1>                 dec     cx
    80 0000E2B8 75FD                <1>                 jnz     .labelLD
    81 0000E2BA 4B                  <1>                 dec     bx
    82 0000E2BB 75F7                <1>                 jnz     .longDelay
    83                              <1>                 ;mov     bx, 3 
    84 0000E2BD EBD8                <1>                 jmp     .loop0         
    85                              <1> 
    86                              <1> led4blinks:
    87                              <1> .loop0:
    88 0000E2BF BB0400              <1>                 mov     bx, 4
    89                              <1> .loop:            
    90 0000E2C2 B001                <1>                 mov     al, 0x01
    91 0000E2C4 E680                <1>                 out     0x80, al
    92 0000E2C6 B9FFFF              <1>                 mov     cx, 0xffff
    93                              <1> .label01:
    94 0000E2C9 49                  <1>                 dec     cx
    95 0000E2CA 75FD                <1>                 jnz     .label01
    96 0000E2CC B000                <1>                 mov     al, 0x00
    97 0000E2CE E680                <1>                 out     0x80, al
    98 0000E2D0 B9FFFF              <1>                 mov     cx, 0xffff
    99                              <1> .label02:
   100 0000E2D3 49                  <1>                 dec     cx
   101 0000E2D4 75FD                <1>                 jnz     .label02
   102                              <1> 
   103 0000E2D6 4B                  <1>                 dec     bx
   104 0000E2D7 75E9                <1>                 jnz     .loop
   105                              <1> ;                mov     al, 0x01
   106                              <1> ;                out     0x80, al
   107                              <1>                 
   108 0000E2D9 BB0500              <1>                 mov     bx, 5
   109                              <1> .longDelay:                
   110 0000E2DC B9FFFF              <1>                 mov     cx, 0xffff
   111                              <1> .labelLD:
   112 0000E2DF 49                  <1>                 dec     cx
   113 0000E2E0 75FD                <1>                 jnz     .labelLD
   114 0000E2E2 4B                  <1>                 dec     bx
   115 0000E2E3 75F7                <1>                 jnz     .longDelay
   116                              <1>                 ;mov     bx, 3 
   117 0000E2E5 EBD8                <1>                 jmp     .loop0         
   128                                  %include "testSram.asm"
     1                              <1> ;-------------------------------------------------------------------------
     2                              <1> %define MIN_RAM_SIZE    64              ; At least 32 KiB to boot the system
     3                              <1> ;-------------------------------------------------------------------------
     4                              <1> ; Test first 64 KiB (MIN_RAM_SIZE) of RAM
     5                              <1> testFirst64kb:
     6                              <1> 	;mov	al,e_low_ram_test
     7                              <1> 	;out	post_reg,al
     8 0000E2E7 31F6                <1> 	xor	si,si
     9 0000E2E9 31FF                <1> 	xor	di,di
    10 0000E2EB 8EDF                <1> 	mov	ds,di
    11 0000E2ED 8EC7                <1> 	mov	es,di
    12                              <1> 
    13                              <1> ;Inicio da carga do valor de AX
    14 0000E2EF B8AA55              <1> 	mov	ax,55AAh		; first test pattern
    15 0000E2F2 B90080              <1> 	mov	cx,MIN_RAM_SIZE*512	; RAM size to test in words
    16 0000E2F5 F3AB                <1>     rep	stosw				; store test pattern
    17                              <1> ;Fim da carga do valor de AX        
    18                              <1> ;inicio da comparação    
    19                              <1> ;lodsw CX=total repetição, SI=Endereço a ser lido AX recebe o dado
    20 0000E2F7 B90080              <1> 	mov	cx,MIN_RAM_SIZE*512	; RAM size to test in words
    21                              <1> .1:
    22 0000E2FA AD                  <1> 	lodsw
    23 0000E2FB 3DAA55              <1> 	cmp	ax,55AAh		; compare to the test pattern
    24 0000E2FE 7524                <1> 	jne	low_ram_fail
    25 0000E300 E2F8                <1> 	loop	.1
    26                              <1> ;Fim da comparação        
    27 0000E302 31F6                <1> 	xor	si,si
    28 0000E304 31FF                <1> 	xor	di,di
    29 0000E306 B855AA              <1> 	mov	ax,0AA55h		; second test pattern
    30 0000E309 B90080              <1> 	mov	cx,MIN_RAM_SIZE*512	; RAM size to test in words
    31 0000E30C F3AB                <1>     rep stosw				; store test pattern
    32 0000E30E B90080              <1> 	mov	cx,MIN_RAM_SIZE*512	; RAM size to test in words
    33                              <1> .2:
    34 0000E311 AD                  <1> 	lodsw
    35 0000E312 3D55AA              <1> 	cmp	ax,0AA55h		; compare to the test pattern
    36 0000E315 750D                <1> 	jne	low_ram_fail
    37 0000E317 E2F8                <1> 	loop	.2
    38 0000E319 31FF                <1> 	xor	di,di
    39 0000E31B 31C0                <1> 	xor	ax,ax			; zero
    40 0000E31D B90080              <1> 	mov	cx,MIN_RAM_SIZE*512	; RAM size to test in words
    41 0000E320 F3AB                <1>     rep stosw				; zero the memory
    42 0000E322 EB03                <1> 	jmp	low_ram_ok		; test passed
    43                              <1> 
    44                              <1> low_ram_fail:
    45                              <1> 	;mov	al,e_low_ram_fail	; test failed
    46                              <1> 	;out	post_reg,al
    47 0000E324 E948FF              <1>     jmp     led2blinks
    48                              <1> 
    49                              <1> ;-------------------------------------------------------------------------
    50                              <1> ;-------------------------------------------------------------------------
    51                              <1> ; Low memory test passed
    52                              <1> 
    53                              <1> low_ram_ok:
    54 0000E327 BB0104              <1>         mov     bx, 0x401
    55 0000E32A 3E8807              <1>         mov     byte ds:[bx], al
    56 0000E32D E92FFD              <1>         jmp     initBios
    57                              <1> 
    58                              <1> 
    59                              <1> ;-------------------------------------------------------------------------
    60                              <1> ; Test of 64k bytes of memory
    61                              <1> ; Reg ds = segment to test
    62                              <1> ;	  es = segment to test
    63                              <1> ;
    64                              <1> test64kb:
    65                              <1> 	;mov	al,e_low_ram_test
    66                              <1> 	;out	post_reg,al
    67 0000E330 31F6                <1> 	xor	si,si
    68 0000E332 31FF                <1> 	xor	di,di
    69                              <1> 
    70                              <1> ;Inicio da carga do valor de AX
    71 0000E334 B8AA55              <1> 	mov	ax,55AAh		; first test pattern
    72 0000E337 B90080              <1> 	mov	cx,MIN_RAM_SIZE*512	; RAM size to test in words
    73 0000E33A F3AB                <1>     rep	stosw				; store test pattern
    74                              <1> ;Fim da carga do valor de AX        
    75                              <1> ;inicio da comparação    
    76                              <1> ;lodsw CX=total repetição, SI=Endereço a ser lido AX recebe o dado
    77 0000E33C B90080              <1> 	mov	cx,MIN_RAM_SIZE*512	; RAM size to test in words
    78                              <1> .1:
    79 0000E33F AD                  <1> 	lodsw
    80 0000E340 3DAA55              <1> 	cmp	ax,55AAh		; compare to the test pattern
    81 0000E343 75DF                <1> 	jne	low_ram_fail
    82 0000E345 E2F8                <1> 	loop	.1
    83                              <1> ;Fim da comparação        
    84 0000E347 31F6                <1> 	xor	si,si
    85 0000E349 31FF                <1> 	xor	di,di
    86 0000E34B B855AA              <1> 	mov	ax,0AA55h		; second test pattern
    87 0000E34E B90080              <1> 	mov	cx,MIN_RAM_SIZE*512	; RAM size to test in words
    88 0000E351 F3AB                <1>     rep stosw				; store test pattern
    89 0000E353 B90080              <1> 	mov	cx,MIN_RAM_SIZE*512	; RAM size to test in words
    90                              <1> .2:
    91 0000E356 AD                  <1> 	lodsw
    92 0000E357 3D55AA              <1> 	cmp	ax,0AA55h		; compare to the test pattern
    93 0000E35A 75C8                <1> 	jne	low_ram_fail
    94 0000E35C E2F8                <1> 	loop	.2
    95 0000E35E 31FF                <1> 	xor	di,di
    96 0000E360 31C0                <1> 	xor	ax,ax			; zero
    97 0000E362 B90080              <1> 	mov	cx,MIN_RAM_SIZE*512	; RAM size to test in words
    98 0000E365 F3AB                <1>     rep stosw				; zero the memory
    99 0000E367 EB00                <1> 	jmp	ram_ok		; test passed
   100                              <1> 
   101                              <1> ;-------------------------------------------------------------------------
   102                              <1> ;-------------------------------------------------------------------------
   103                              <1> ; Low memory test passed
   104                              <1> 
   105                              <1> ram_ok:
   106 0000E369 B800F0              <1>         mov ax, 0xF000
   107 0000E36C 8ED8                <1>         mov ds, ax
   108 0000E36E BB[3F01]            <1>         mov  bx, blocoOK
   109 0000E371 E809FE              <1>         call print2
   110                              <1> 
   111 0000E374 BB0104              <1>         mov     bx, 0x401
   112 0000E377 3E8807              <1>         mov     byte ds:[bx], al
   113 0000E37A C3                  <1>         ret
   114                              <1> 
   115                              <1> ;-------------------------------------------------------------------------
   116                              <1> ;  Low memory error: beep - pause - beep - pause ... - 400 Hz
   117                              <1> beep:
   118                              <1> ;	mov	al,0B6h
   119                              <1> ;	out	pit_ctl_reg,al		; PIT - channel 2 mode 3
   120                              <1> ;	mov	ax,pic_freq/400		; 400 Hz signal
   121                              <1> ;	out	pit_ch2_reg,al
   122                              <1> ;	mov	al,ah
   123                              <1> ;	out	pit_ch2_reg,al
   124                              <1> ;	in	al,ppi_pb_reg
   125                              <1> ;.1:
   126                              <1> ;	or	al,3			; turn speaker on and enable
   127                              <1> ;	out	ppi_pb_reg,al		; PIT channel 2 to speaker
   128                              <1> ;	mov	cx,0
   129                              <1> ;.2:
   130                              <1> ;	nop
   131                              <1> ;	loop	.2
   132                              <1> ;	and	al,0FCh			; turn of speaker
   133                              <1> ;	out	ppi_pb_reg,al
   134                              <1> ;	mov	cx,0
   135                              <1> ;.3:
   136                              <1> ;	nop
   137                              <1> ;	loop	.3
   138                              <1> ;	jmp	.1
   129                                  
   130 0000E37B FF<rep 1C75h>                   setloc	0FFF0h			; Power-On Entry Point, macro fills space from last line with FF
   130          ******************       warning: Inserting 7285 bytes [-w+user]
   131                                  start:
   132 0000FFF0 EA[00E0]00F0                    jmp     0F000h:reset
   133 0000FFF5 FF<rep Ah>                      setloc	0FFFFh			; Pad remainder of ROM
   133          ******************       warning: Inserting 10 bytes [-w+user]
   134 0000FFFF FF                      	      db	0ffh            
